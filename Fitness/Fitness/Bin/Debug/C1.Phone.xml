<?xml version="1.0"?>
<doc>
    <assembly>
        <name>C1.Phone</name>
    </assembly>
    <members>
        <member name="T:C1.Phone.C1HslColor">
            <summary>
            Class that allows to increase/decrease lightness
            of the specified color.
            </summary>
        </member>
        <member name="M:C1.Phone.C1HslColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1HslColor"/> struct.
            </summary>
            <param name="h">Hue is a value between 0 and 1.</param>
            <param name="s">Saturation is a value between 0 and 1.</param>
            <param name="l">Luminance is a value between 0 and 1.</param>
        </member>
        <member name="M:C1.Phone.C1HslColor.#ctor(System.Byte,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1HslColor"/> struct.
            </summary>
            <param name="a">Alpha channel.</param>
            <param name="h">Hue is a value between 0 and 1.</param>
            <param name="s">Saturation is a value between 0 and 1.</param>
            <param name="l">Luminance is a value between 0 and 1.</param>
        </member>
        <member name="M:C1.Phone.C1HslColor.#ctor(System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1HslColor"/> struct.
            </summary>
            <param name="rgbColor">RGB color used to initialize the HSL color.</param>
        </member>
        <member name="P:C1.Phone.C1HslColor.Hue">
            <summary>
            Gets or sets the hue of the color.
            </summary>
            <remarks>
            Hue is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1HslColor.Saturation">
            <summary>
            Gets or sets the saturation of the color.
            </summary>
            <remarks>
            Saturation is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1HslColor.Luminance">
            <summary>
            Gets or sets the luminance of the color.
            </summary>
            <remarks>
            Luminance is a value between 0 and 1.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1HslColor.Alpha">
            <summary>
            Gets or sets the alpha channel of the color.
            </summary>
        </member>
        <member name="T:C1.Phone.C1DateTimePicker">
            <summary>
            Visual element that allows to pick up a date field which pops up a dialog containing a date editor.
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.SelectedDateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.SelectedDate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.MinDateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.MinDate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.MaxDateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.MaxDate"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1DateTimePicker.UpdateCulture">
            <summary>
            Updates all culture-dependant values.
            </summary>
        </member>
        <member name="M:C1.Phone.C1DateTimePicker.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:C1.Phone.C1DateTimePicker.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">Name of the property that was changed.</param>
        </member>
        <member name="M:C1.Phone.C1DateTimePicker.OnSelectedDateChanged(C1.Phone.NullablePropertyChangedEventArgs{System.DateTime})">
            <summary>
            Raises the <see cref="T:System.DateTime"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.AllowNullProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.AllowNull"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.Header"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.TitleProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.Title"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.DateFormatProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.DateFormat"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.TimeFormatProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.TimeFormat"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.EditModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.EditMode"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.IsPopupAnimationEnabledProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.IsPopupAnimationEnabled"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.DateWatermarkProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.DateWatermark"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePicker.TimeWatermarkProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateTimePicker.TimeWatermark"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1DateTimePicker.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1DateTimePicker"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1DateTimePicker.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1DateTimePicker"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.SelectedDate">
            <summary>
            Gets or sets the date that is displayed as selected in this control.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.MinDate">
            <summary>
            Gets or sets the minimum DateTime value allowed for the <see cref="T:C1.Phone.C1DateTimePicker"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.MaxDate">
            <summary>
            Gets or sets the maximum DateTime allowed for the <see cref="T:C1.Phone.C1DateTimePicker"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.SelectedDateString">
            <summary>
            Gets the string representation of the selected date.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.SelectedTimeString">
            <summary>
            Gets the string representation of the selected time.
            </summary>
        </member>
        <member name="E:C1.Phone.C1DateTimePicker.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:C1.Phone.C1DateTimePicker.SelectedDateChanged">
            <summary>
            Fires when the <see cref="P:C1.Phone.C1DateTimePicker.SelectedDate"/> property changes.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.AllowNull">
            <summary>
            Gets or sets whether the control accepts null values.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.Header">
            <summary>
            Gets or sets the header of the control.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.HeaderTemplate">
            <summary>
            Gets or sets the template used to display the control's header.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.Title">
            <summary>
            Gets or sets the title shown in the dialog that contains the date editor.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.DateFormat">
            <summary>
            Gets or sets the format string to use when converting the selected date to a string.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.TimeFormat">
            <summary>
            Gets or sets the format string to use when converting the selected time to a string.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.EditMode">
            <summary>
            Defines edit mode.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.IsPopupAnimationEnabled">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value specifying whether control popup expanding and collapsing animations.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.DateWatermark">
            <summary>
            Gets or sets the help text to show instead of date when the control is empty.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateTimePicker.TimeWatermark">
            <summary>
            Gets or sets the help text to show instead of time when the control is empty.
            </summary>
        </member>
        <member name="T:C1.Phone.NullablePropertyChangedEventArgs`1">
            <summary>
            Wrapper class for the <see cref="T:C1.Phone.PropertyChangedEventArgs`1"/> class for case when T 
            is <see cref="T:System.Nullable`1"/>.
            </summary>
            <typeparam name="T">structure</typeparam>
            <remarks>
            This class is required for design-time, as VS 2010 can't work with nested generic attributes 
            directly when adding event handlers in xaml.
            </remarks>
        </member>
        <member name="T:C1.Phone.PropertyChangedEventArgs`1">
            <summary>
            Provides event data for OnPropertyChanged events.
            </summary>
        </member>
        <member name="P:C1.Phone.PropertyChangedEventArgs`1.NewValue">
            <summary>
            The value of the property after the change.
            </summary>
        </member>
        <member name="P:C1.Phone.PropertyChangedEventArgs`1.OldValue">
            <summary>
            The value of the property before the change.
            </summary>
        </member>
        <member name="T:C1.Phone.C1DateTimePickerEditMode">
            <summary>
            Determines the <see cref="T:C1.Phone.C1DateTimePicker"/> edit mode.
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePickerEditMode.Date">
            <summary>
            The <see cref="T:C1.Phone.C1DateTimePicker"/> control shows date part only.
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePickerEditMode.Time">
            <summary>
            The <see cref="T:C1.Phone.C1DateTimePicker"/> control shows time part only.
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateTimePickerEditMode.DateTime">
            <summary>
            The <see cref="T:C1.Phone.C1DateTimePicker"/> control shows date and time parts.
            </summary>
        </member>
        <member name="T:C1.Phone.C1DateSelector">
            <summary>
            Visual element that allows a user to select a date by dragging day month and year from three <see cref="T:C1.Phone.C1LoopingList"/>.
            </summary>
        </member>
        <member name="T:C1.Phone.ILoopingListGroupOwner">
            <summary>
            Returns the list of <see cref="T:C1.Phone.C1LoopingList"/> controls, which should work as a group. 
            </summary>
            <remarks>
            Implement this interface in some class and set <see cref="P:C1.Phone.C1LoopingList.GroupOwner"/> property to force several <see cref="T:C1.Phone.C1LoopingList"/> controls working as a group.
            In such case, when end-user starts manipulation on the one <see cref="T:C1.Phone.C1LoopingList"/> control, other <see cref="T:C1.Phone.C1LoopingList"/> controls from the same group 
            will be collapsed to the single item.
            </remarks>
        </member>
        <member name="P:C1.Phone.ILoopingListGroupOwner.Group">
            <summary>
            The list of <see cref="T:System.Collections.Generic.IList`1"/> list of controls, which should work as a group. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateSelector.SelectedDateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateSelector.SelectedDate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateSelector.ItemStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateSelector.ItemStyle"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateSelector.FirstYearProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateSelector.FirstYear"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1DateSelector.LastYearProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DateSelector.LastYear"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1DateSelector.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1DateSelector"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1DateSelector.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1DateSelector"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1DateSelector.SelectedDate">
            <summary>
            Gets or sets the date that is displayed as selected in this control.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateSelector.Group">
            <summary>
            Implements the <see cref="T:C1.Phone.ILoopingListGroupOwner"/> interface.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateSelector.ItemStyle">
            <summary>
            Gets or sets the style applied to each item of the lists of days, months and years.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateSelector.FirstYear">
            <summary>
            Gets or sets the first year of the list of years
            </summary>
        </member>
        <member name="P:C1.Phone.C1DateSelector.LastYear">
            <summary>
            Gets or sets the last year of the list of years
            </summary>
        </member>
        <member name="T:C1.Phone.C1TimeSelector">
            <summary>
            Visual element that allows a user to select a date by dragging day month and year from three <see cref="T:C1.Phone.C1LoopingList"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1TimeSelector.GetCulture(System.Windows.FrameworkElement)">
            <summary>
            Returns the <see cref="T:System.Globalization.CultureInfo"/> object for formatting culture-dependant values in the specified element.
            This method honors FrameworkElement.Language property if it has been set on the specified element or on some parent element in the visual tree.
            If Language property hasn't been set, then method returns CultureInfo.CurrentCulture.
            </summary>
            <param name="element">The <see cref="T:System.Windows.FrameworkElement"/> object to check the.</param>
            <returns>The <see cref="T:System.Globalization.CultureInfo"/> object for formatting culture-dependant values in the specified element.</returns>
        </member>
        <member name="F:C1.Phone.C1TimeSelector.SelectedTimeProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TimeSelector.SelectedTime"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TimeSelector.ItemStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TimeSelector.ItemStyle"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1TimeSelector.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1TimeSelector"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1TimeSelector.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1TimeSelector"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1TimeSelector.Group">
            <summary>
            Implements the <see cref="T:C1.Phone.ILoopingListGroupOwner"/> interface.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TimeSelector.SelectedTime">
            <summary>
            Gets or sets the selected time.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TimeSelector.ItemStyle">
            <summary>
            Gets or sets the style applied to each item of the lists of hours minutes and AM/PM list.
            </summary>
        </member>
        <member name="T:C1.Phone.DateTimeTypeConverter">
            <summary>
            Converts to and from the DateTime type. 
            </summary>
        </member>
        <member name="T:C1.Phone.NullableDateTimeConverter">
            <summary>
            Converts to and from the <see cref="T:System.Nullable`1"/> type (using the DateTime type constraint on the generic). 
            </summary>
        </member>
        <member name="T:C1.Phone.MaskFormat">
            <summary>
            Defines how to format the value inside of a <see cref="T:C1.Phone.C1MaskedTextBox"/>.
            </summary>
        </member>
        <member name="F:C1.Phone.MaskFormat.IncludePrompt">
            <summary>
            Return text input by the user as well as any instances of the prompt character.
            </summary>
        </member>
        <member name="F:C1.Phone.MaskFormat.IncludeLiterals">
            <summary>
            Return text input by the user as well as any literal characters defined in the mask.
            </summary>
        </member>
        <member name="F:C1.Phone.MaskFormat.IncludePromptAndLiterals">
            <summary>
            Return text input by the user as well as any literal characters defined in the mask and any instances of the prompt character.
            </summary>
        </member>
        <member name="F:C1.Phone.MaskFormat.ExcludePromptAndLiterals">
            <summary>
            Return only text input by the user.
            </summary>
        </member>
        <member name="T:C1.Phone.C1MaskedTextBox">
            <summary>
            Represents a control that uses a mask to prevent users from entering invalid data.
            </summary>
            <summary>
            The C1MaskedTextBox is an editor that uses a mask to prevent end-users from entering invalid data.
            </summary>	
        </member>
        <member name="T:C1.Phone.C1TextBoxBase">
            <summary> 
            Base class for all ComponentOne text box controls.
            </summary>
            <remarks>
            Adds <see cref="P:C1.Silverlight.C1TextBoxBase.Watermark" /> and <see cref="P:C1.Silverlight.C1TextBoxBase.IsEnabled" /> properties, 
            as well as styles for mouse over and focus.
            </remarks>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.C1TextProperty">
            <summary>
            Identifies the C1Text dependency property.
            </summary>
            <remarks>
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </remarks>
        </member>
        <member name="M:C1.Phone.C1TextBoxBase.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="M:C1.Phone.C1TextBoxBase.OnIsFocusedChanged(System.Boolean)">
            <summary>
            Callback called when the <see cref="P:IsFocused"/> property changes.
            </summary>
            <param name="oldValue">The previous value of IsFocused.</param>
        </member>
        <member name="M:C1.Phone.C1TextBoxBase.OnTextChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called immediately after the Text property changes.
            </summary>
            <param name="e">Provides data about the change.</param>
        </member>
        <member name="M:C1.Phone.C1TextBoxBase.UpdateIsWatermarked">
            <summary>
            Derived classes can call this method when the <see cref="P:IsWatermarked"/> state is changed from their point of view.
            This method forces the IsWatermarked state to be updated without clearing the Text property.
            </summary>
        </member>
        <member name="M:C1.Phone.C1TextBoxBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Called when <see cref="E:System.Windows.UIElement.KeyDown"/> event occurs.
            </summary>
            <param name="e">The data for the event.</param>
        </member>
        <member name="M:C1.Phone.C1TextBoxBase.ChangeVisualStateWatermark(System.Boolean)">
            <summary>
            Updates the current visual state of the Watermark visual state group to match the object's properties.
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.WatermarkProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.Watermark"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.SelectOnFocusProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.SelectOnFocus"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1TextBoxBase.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1TextBoxBase.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1TextBoxBase.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1TextBoxBase"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1TextBoxBase.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1TextBoxBase"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="E:C1.Phone.C1TextBoxBase.KeyDown">
            <summary>
            Occurs when a keyboard key is pressed while the <see cref="T:System.Windows.UIElement"/> has focus.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.C1Text">
            <summary>
            Get or set the C1Text property.
            This property is used as a workaround when a binding needs to be updated on each keystroke.
            </summary>
        </member>
        <member name="E:C1.Phone.C1TextBoxBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.IsWatermarked">
            <summary>
            Gets a value indicating whether this textbox is watermarked.
            </summary>
            <value>
            	<c>true</c> if this textbox is watermarked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.Watermark">
            <summary>
            Gets or sets the content of the watermark.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.SelectOnFocus">
            <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
            <remarks>
            The default value is OnDefaultSelection.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.Phone.C1ValidationDecorator"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="P:C1.Phone.C1TextBoxBase.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used to highlight the focused control.
            </summary>
        </member>
        <member name="M:C1.Phone.C1MaskedTextBox.UpdateValue">
            <summary>
            For Silverlight version of the control, forces <see cref="T:C1.Phone.C1MaskedTextBox"/> to update its 
            <see cref="P:C1.Phone.C1MaskedTextBox.Value"/> and Text properties when the control is not loaded. 
            Does nothing in WPF.
            </summary>
            <remarks>
            In Silverlight, when <see cref="T:C1.Phone.C1MaskedTextBox"/> is not loaded yet or not included in a visual
            tree at all, it doesn't get notifications about the Text property changes and can't update its
            <see cref="P:C1.Phone.C1MaskedTextBox.Value"/> and Text properties at the proper time therefore, this behavior is inherited
            from the base TextBox control. If you need to get correct values of these properties while the control
            is not loaded, call the <see cref="M:C1.Phone.C1MaskedTextBox.UpdateValue"/> method after you changed the properties that affect
            a text formatting, such as <see cref="P:C1.Phone.C1MaskedTextBox.Mask"/>, <see cref="P:C1.Phone.C1MaskedTextBox.TextMaskFormat"/> and so on.
            <para>
            This method does nothing when Silverlight version of the control is loaded, as well as in the WPF
            version of the control at any moment independently of its load state.
            </para>
            </remarks>
        </member>
        <member name="M:C1.Phone.C1MaskedTextBox.OnMaskedTextChanged(C1.Phone.MaskedTextChangedEventArgs)">
            <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.Phone.C1MaskedTextBox.Mask"/> changes in the text box.
            </summary>
            <see cref="E:MaskedTextChanged"/>
        </member>
        <member name="F:C1.Phone.C1MaskedTextBox.ValueProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MaskedTextBox.Value"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1MaskedTextBox.MaskProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MaskedTextBox.Mask"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1MaskedTextBox.PromptCharProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MaskedTextBox.PromptChar"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1MaskedTextBox.TextMaskFormatProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MaskedTextBox.TextMaskFormat"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1MaskedTextBox.ReplaceModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MaskedTextBox.ReplaceMode"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1MaskedTextBox.CultureProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MaskedTextBox.Culture"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1MaskedTextBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1MaskedTextBox"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1MaskedTextBox.IsValid">
            <summary>
            Gets a value that determines whether the control contains a valid entry.
            </summary>
        </member>
        <member name="E:C1.Phone.C1MaskedTextBox.MaskedTextChanged">
            <summary>
            Occurs when consistent content that conforms to the <see cref="P:C1.Phone.C1MaskedTextBox.Mask"/> changes in the text box.
            </summary>
            <remarks>
            Just after the Text property has beed changed via user input or code, 
            the <see cref="T:C1.Phone.C1MaskedTextBox"/> updates the text again in order to make it consistent with
            the <see cref="P:C1.Phone.C1MaskedTextBox.Mask"/>. As a result, the TextChanged event can be triggered twice on each user
            input. In contrast to this, the <see cref="E:C1.Phone.C1MaskedTextBox.MaskedTextChanged"/> is triggered only when Text is
            updated with a value that conforms to the <see cref="P:C1.Phone.C1MaskedTextBox.Mask"/>.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1MaskedTextBox.Value">
            <summary>
            Gets or sets the formatted content of the control as specified by the <see cref="P:C1.Phone.C1MaskedTextBox.TextMaskFormat"/> property.
            </summary>
        </member>
        <member name="P:C1.Phone.C1MaskedTextBox.Mask">
            <summary>
            Gets or sets the input mask.
            </summary>
            <remarks>
            <para>The mask consists of a string that determines what class of character is acceptable
            at each input position.</para>
            <para>Valid mask characters are:</para>
            <para>
            <b>0</b>    Digit (0-9)</para>
            <para>
            <b>9</b>    Digit or space</para>
            <para>
            <b>#</b>    Digit, space, or sign (+/-)</para>
            <para>
            <b>L</b>    Letter</para>
            <para>
            <b>?</b>    Letter or space</para>
            <para>
            <b>A</b>    Letter or digit</para>
            <para>
            <b>a</b>    Letter, digit, or space</para>
            <para>
            <b>&amp;</b>    Any character</para>
            <para>
            <b>.</b>    Localized decimal symbol</para>
            <para>
            <b>,</b>    Localized thousand separator</para>
            <para>
            <b>:</b>    Localized time separator</para>
            <para>
            <b>/</b>    Localized date separator</para>
            <para>Other characters are treated as literals. They are displayed in the control but cannot
            be edited.</para>
            <para>For example, the mask "000-0000" causes the control to accept only digits at every
            position except the third, which always contains a dash.</para>
            
            </remarks>
        </member>
        <member name="P:C1.Phone.C1MaskedTextBox.PromptChar">
            <summary>
            Gets or sets the character used to show spaces where user is supposed to type.
            </summary>
        </member>
        <member name="P:C1.Phone.C1MaskedTextBox.TextMaskFormat">
            <summary>
            Gets or sets a value that determines whether literals and prompt characters are included in the <see cref="P:C1.Phone.C1MaskedTextBox.Value"/> property.
            </summary>
        </member>
        <member name="P:C1.Phone.C1MaskedTextBox.ReplaceMode">
            <summary>
            Gets or sets a value indicating whether new characters will be inserted or replace existing ones while you are typing.
            </summary>
            <remarks>
            Set this property value to true if typing characters should be inserted at an insertion point position; otherwise, set it to false if typing characters should overwrite existing characters at an insertion point position.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1MaskedTextBox.Culture">
            <summary>
            Sets the culture used to display the value in the <see cref="T:C1.WPF.C1MaskedTextBox" />.
            </summary>
        </member>
        <member name="T:C1.Phone.MaskedTextChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Phone.C1MaskedTextBox.MaskedTextChanged"/> event.
            </summary>
        </member>
        <member name="M:C1.Phone.MaskedTextChangedEventArgs.#ctor(System.String,System.String)">
            <summary>
            Creates an instance of the <see cref="T:C1.Phone.MaskedTextChangedEventArgs"/> class.
            </summary>
            <param name="newText">
            The new text.
            </param>
            <param name="oldText">
            The old text.
            </param>
        </member>
        <member name="P:C1.Phone.MaskedTextChangedEventArgs.OldText">
            <summary>
            Gets an old text.
            </summary>
        </member>
        <member name="P:C1.Phone.MaskedTextChangedEventArgs.NewText">
            <summary>
            Gets a new text.
            </summary>
        </member>
        <member name="T:C1.Phone.MaskedTextChangedEventHandler">
            <summary>
            Represents the method that handles the <see cref="E:C1.Phone.C1MaskedTextBox.MaskedTextChanged"/> event.
            </summary>
            <param name="sender">
            The event sender.
            </param>
            <param name="e">
            The event data.
            </param>
        </member>
        <member name="T:C1.Phone.C1NumericBox">
            <remarks>
            <list>
            <item>
            <see cref="P:C1.Silverlight.C1NumericBox.Format" /> property supports standard and custom formats.</item>
            <item>
            <see cref="P:C1.Silverlight.C1NumericBox.Watermark" /> property shows help text when the control is empty.</item>
            <item>
            <see cref="P:C1.Silverlight.C1NumericBox.AllowNull" /> property allows binding to and displaying null values.</item>
            </list>
            When the control is empty, or bound to a null value, the <see cref="P:C1.Silverlight.C1NumericBox.Value" /> property returns <b>double.NaN</b>.
            </remarks>
            <summary>
            The C1NumericBox control is a numeric editor that allows you to display and edit numeric values in many formats.
            </summary>	
        </member>
        <member name="M:C1.Phone.C1NumericBox.OnValueChanged(System.Double)">
            Value property setter
        </member>
        <member name="M:C1.Phone.C1NumericBox.OnValueChanged(C1.Phone.PropertyChangedEventArgs{System.Double})">
            <summary>
            Raises the <see cref="E:C1.Phone.C1NumericBox.ValueChanged"/> event.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:C1.Phone.C1NumericBox.Select(System.Int32,System.Int32)">
            <summary>
            Selects the text specified by start and length.
            </summary>
            <param name="start">Start of the selection.</param>
            <param name="length">Length of the selection.</param>
        </member>
        <member name="M:C1.Phone.C1NumericBox.ConvertToInvariantNumber(System.String)">
            <summary>
            Translates culture specific digit chars (i.e. non '0'-'9') to standard chars in the specified
            string.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.C1NumericBox.ChangeVisualStateButtonsVisibility(System.Boolean)">
            <summary>
            Updates the current visual state of the ButtonsVisibility visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Phone.C1NumericBox.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Phone.C1NumericBox.ChangeVisualStateFocus(System.Boolean)">
            <summary>
            Updates the current visual state of the Focus visual state group to match the object's properties.
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.CultureProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Culture"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.FormatProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Format"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.MaximumProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Maximum"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.MinimumProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Minimum"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.IncrementProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Increment"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.ValueProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Value"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.ShowButtonsProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.ShowButtons"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.IsReadOnlyProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.IsReadOnly"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.TextAlignment"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.TextProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Text"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.SelectionStartProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.SelectionStart"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.SelectionLengthProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.SelectionLength"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.AllowNullProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.AllowNull"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.DelayProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Delay"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.IntervalProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Interval"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.InputScopeProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.InputScope"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.WatermarkProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.Watermark"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.RangeValidationModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.RangeValidationMode"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.SelectOnFocusProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.SelectOnFocus"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.FocusCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.FocusCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.DisabledCuesVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.DisabledCuesVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.IsMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.IsMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.ForceMouseOverProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.ForceMouseOver"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.IsFocusedProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.IsFocused"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.ValidationDecoratorStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.ValidationDecoratorStyle"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.MouseOverBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.MouseOverBrush"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.SelectionBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.SelectionBackground"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.SelectionForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.SelectionForeground"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.CaretBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.CaretBrush"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.PressedBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.PressedBrush"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.FocusBrushProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.FocusBrush"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.ButtonBackgroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.ButtonBackground"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1NumericBox.ButtonForegroundProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1NumericBox.ButtonForeground"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1NumericBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1NumericBox.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1NumericBox"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="E:C1.Phone.C1NumericBox.ValueChanged">
            <summary>
            Fires when the <see cref="P:C1.Phone.C1NumericBox.Value"/> property changes.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Culture">
            <summary>
            Sets the culture used to display the value in the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Format">
            <summary>
            Gets or sets the value for the Format of the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
            <remarks>
            The property accepts any standard or custom numeric format supported by the String.Format method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Maximum">
            <summary>
            Gets or sets the maximum value allowed for the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Minimum">
            <summary>
            Gets or sets the minimum value allowed for the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Increment">
            <summary>
            Gets or sets the increment applied when the user pressed the up/down arrow keys.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Value">
            <summary>
            Gets or sets the numeric value in the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
            <remarks>
            Null values are represented by the <b>Value</b> property as <b>double.NaN</b>. See also the <see cref="P:C1.Silverlight.C1NumericBox.AllowNull"/> property.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1NumericBox.ShowButtons">
            <summary>
            Shows or hides the buttons for Increment or Decrement.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.IsReadOnly">
            <summary>
            Gets or sets the value that determines if the <see cref="T:C1.Phone.C1NumericBox"/> is read-only.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.TextAlignment">
            <summary>
            Gets or sets how the text should be aligned in the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Text">
            <summary>
            Gets the text shown in the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.SelectionStart">
            <summary>
            Gets or sets the starting position of the text selected in the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.SelectionLength">
            <summary>
            Gets or sets the number of characters in the current selection in the <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.AllowNull">
            <summary>
            Gets or sets whether the user can enter nulls values.
            </summary>
            <remarks>
            Null values are encoded in the <b>Value</b> property as <b>double.NaN</b>.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Delay">
            <summary>
            Gets or sets the delay for the Increase and Decrease buttons.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Interval">
            <summary>
            Gets or sets the interval for the Increase and Decrease buttons.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.InputScope">
            <summary>
            Gets or sets the keyboard type that will appear when the user set the focus in the numeric box.
            </summary>
            <remarks>
            See http://msdn.microsoft.com/en-us/library/system.windows.input.inputscopenamevalue(v=vs.95).aspx for more information.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1NumericBox.Watermark">
            <summary>
            Gets or sets the watermark content displayed when the control is empty.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.RangeValidationMode">
            <summary>
            Gets or sets the mode used to validate the range between Minimum and Maximum.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.SelectOnFocus">
            <summary>
            Gets or sets the condition under which all control text is selected when the control receives focus.
            </summary>
            <remarks>
            The default value is OnDefaultSelection.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1NumericBox.FocusCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the focus visuals of the control are visible.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.DisabledCuesVisibility">
            <summary>
            Gets or sets a value indicating whether the disabled visuals of the control are visible.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.IsMouseOver">
            <summary>
            Returns true if the mouse is over the control.
            </summary>
        </member>
        <member name="E:C1.Phone.C1NumericBox.IsMouseOverChanged">
            <summary> 
            Event raised when the <see cref="P:IsMouseOver"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.ForceMouseOver">
            <summary>
            Set to true to force the mouse over visual state.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.IsFocused">
            <summary>
            Returns true if the control has the focus.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.ValidationDecoratorStyle">
            <summary>
            Gets or sets the style that is applied to the inner <see cref="T:C1.Phone.C1ValidationDecorator"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.MouseOverBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used to highlight the control when it has the mouse over.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.SelectionBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that fills the background of the selected text.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.SelectionForeground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used as foreground of the selected text.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.CaretBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> of the blinking cursor of an input control.  When .NET Framework is v3.5, 'CaretBrush' takes no effect.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.PressedBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used to paint a button when it is pressed.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.FocusBrush">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> used to highlight the focused control.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.ButtonBackground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that will be assigned to the Background of the buttons inside the control.
            </summary>
        </member>
        <member name="P:C1.Phone.C1NumericBox.ButtonForeground">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that will be assigned to the Foreground of the buttons inside the control.
            </summary>
        </member>
        <member name="T:C1.Phone.RangeValidationMode">
            <summary>
            Mode of validation of the range between Maximum and Minimum of <see cref="T:C1.Phone.C1NumericBox"/>.
            </summary>
        </member>
        <member name="F:C1.Phone.RangeValidationMode.Always">
            <summary>
            This mode doesn't allow entering out of range values.
            </summary>
        </member>
        <member name="F:C1.Phone.RangeValidationMode.AlwaysTruncate">
            <summary>
            This mode doesn't allow entering out of range values.
            The value will be truncated if the limits are exceeded.
            </summary>
        </member>
        <member name="F:C1.Phone.RangeValidationMode.OnLostFocus">
            <summary>
            The value will be truncated on lost focus.
            </summary>
        </member>
        <member name="T:C1.Phone.SelectOnFocusCondition">
            <summary>
            Defines the possible conditions that cause selection of an entire control text when control receives focus.
            </summary>
        </member>
        <member name="F:C1.Phone.SelectOnFocusCondition.Never">
            <summary>
            Never select a text.
            </summary>
        </member>
        <member name="F:C1.Phone.SelectOnFocusCondition.Always">
            <summary>
            Always select a text.
            </summary>
        </member>
        <member name="F:C1.Phone.SelectOnFocusCondition.OnDefaultSelection">
            <summary>
            Select text only if the both SelectionStart and SelectionLength properties are set to zero.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ToggleSwitch">
            <summary>
            The C1ToggleSwitch represents a switch that can be toggled between two states.
            </summary>	
        </member>
        <member name="M:C1.Phone.C1ToggleSwitch.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1ToggleSwitch"/>.
            </summary>
        </member>
        <member name="T:C1.Phone.CompositeTextUtils">
            <summary>
            Provides utilities for processing a text where each glyph can be represented by multiple
            unicode chars. Such a text in the utility methods is represented by an array of strings,
            where each string represents a single glyph.
            </summary>
        </member>
        <member name="T:C1.Phone.ISpellChecker">
            <summary>
            Provides spell checking services.
            </summary>
            <remarks>
            This interface is implemented by C1SpellChecker in the C1.Silverlight.SpellChecker assembly.
            </remarks>
        </member>
        <member name="M:C1.Phone.ISpellChecker.CheckText(System.String)">
            <summary>
            Checks a string containing text and returns a list of spelling errors.
            </summary>
            <param name="text">Text to be spell-checked.</param>
            <returns>List of <see cref="T:C1.Phone.ICharRange"/> objects that describe the spelling mistakes.</returns>
        </member>
        <member name="M:C1.Phone.ISpellChecker.GetSuggestions(System.String,System.Int32)">
            <summary>
            Gets a list of suggestions for a misspelled word.
            </summary>
            <param name="word">Word to suggest alternatives for.</param>
            <param name="maxSuggestions">Maximum number of suggestions to provide.</param>
            <returns>A list of suggestions for the <paramref name="word"/> parameter.</returns>
        </member>
        <member name="M:C1.Phone.ISpellChecker.ShowSuggestionsMenu(System.Object,System.Windows.Point,System.String,System.Action{System.String})">
            <summary>
            Shows a context menu with suggestions for a misspelled word.
            </summary>
            <param name="editor">The editor control whose content is being spell checked.</param>
            <param name="position">The position in absolute plug-in coordinates where the menu should be open.</param>
            <param name="word">The misspelled word.</param>
            <param name="correctCallback">Callback called when a suggested correction is chosen.</param>
        </member>
        <member name="M:C1.Phone.ISpellChecker.CheckControlAsync(System.Object)">
            <summary>
            Shows a spell-checking dialog for an editor control.
            </summary>
            <param name="editor">Object that contains the text to be spell-checked.</param>
        </member>
        <member name="P:C1.Phone.ISpellChecker.IgnoreList">
            <summary>
            Gets the list of words to ignore during spell-checking.
            </summary>
        </member>
        <member name="P:C1.Phone.ISpellChecker.UserDictionary">
            <summary>
            Gets the user dictionary used for spell-checking.
            </summary>
        </member>
        <member name="P:C1.Phone.ISpellChecker.Enabled">
            <summary>
            Gets a value that indicates whether the main spelling dictionary has been loaded.
            </summary>
        </member>
        <member name="E:C1.Phone.ISpellChecker.DictionaryChanged">
            <summary>
            Event that fires when any of the spell dictionaries changes in any way.
            </summary>
            <remarks>
            This event notifies listeners that the spell dictionaries have changed and
            the text should be re-checked. It fires for example when words are added to the 
            user dictionary or when new dictionaries are loaded. 
            </remarks>
        </member>
        <member name="T:C1.Phone.ICharRange">
            <summary>
            Represents a character range within a string.
            This is used by <see cref="T:C1.Phone.ISpellChecker"/> to represent the
            spelling mistakes found in text.
            </summary>
        </member>
        <member name="P:C1.Phone.ICharRange.Start">
            <summary>
            Gets the index of the start of the range.
            </summary>
        </member>
        <member name="P:C1.Phone.ICharRange.Length">
            <summary>
            Gets the length of the range.
            </summary>
        </member>
        <member name="M:C1.Phone.TokenizedMask.TranslateContextDependentLiteral(System.String)">
            <summary>
            If passed literal is not context dependent then returns the passed value.
            </summary>
            <param name="symbol"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.TokenizedMask.FindNextPrompt(System.Int32,System.Boolean)">
            <summary>
            offset = -1 means "before first"
            offset = Tokens.Count means "after last"
            </summary>
        </member>
        <member name="M:C1.Phone.TokenizedMask.GetApplicableSymbolList(System.Collections.Generic.IList{System.String},System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a list of symbols where non applicable symbols are excessive trailing symbols are excluded.
            </summary>
        </member>
        <member name="P:C1.Phone.MaskToken.IsLiteral">
            <summary>
            Indicates whether the token represents a literal or a prompt symbol.
            </summary>
        </member>
        <member name="P:C1.Phone.MaskToken.OutputSymbol">
            <summary>
            Gets a symbol that as it's shown in the TextBox.
            </summary>
        </member>
        <member name="P:C1.Phone.MaskToken.OriginalSymbol">
            <summary>
            Gets an original mask symbol, as defined in the TextBox.Mask property.
            </summary>
        </member>
        <member name="M:C1.Phone.PromptToken.ClearValue">
            <summary>
            Set the Value property to a default value.
            </summary>
        </member>
        <member name="P:C1.Phone.PromptToken.IsUppercase">
            <summary>
            true - force upper case
            false - force lower case
            null - show as is
            </summary>
        </member>
        <member name="P:C1.Phone.PromptToken.Value">
            <summary>
            Gets or sets a user input for this prompt.
            </summary>
        </member>
        <member name="P:C1.Phone.PromptToken.IsEmpty">
            <summary>
            Indicates whether an input is entered in the token.
            </summary>
        </member>
        <member name="T:C1.Phone.C1GestureEventArgs">
            <summary>
            The base class for all gesture events. Also used by Tap, DoubleTap and Hold.
            </summary>
        </member>
        <member name="M:C1.Phone.C1GestureEventArgs.GetPosition(System.Windows.UIElement)">
            <summary>
            Returns the position of the gesture's starting point relative to a given UIElement.
            </summary>
            <param name="relativeTo">The return value will be relative to this element.</param>
            <returns>The gesture's starting point relative to the given UIElement.</returns>
        </member>
        <member name="M:C1.Phone.C1GestureEventArgs.GetPosition(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Returns the position of a given point relative to a given UIElement.
            </summary>
            <param name="relativeTo">The return value will be relative to this element.</param>
            <param name="point">The point to translate.</param>
            <returns>The given point relative to the given UIElement.</returns>
        </member>
        <member name="P:C1.Phone.C1GestureEventArgs.GestureOrigin">
            <summary>
            The point, in unrotated screen coordinates, where the gesture occurred.
            </summary>
        </member>
        <member name="P:C1.Phone.C1GestureEventArgs.TouchPosition">
            <summary>
            The point, in unrotated screen coordinates, where the first touchpoint is now.
            </summary>
        </member>
        <member name="P:C1.Phone.C1GestureEventArgs.OriginalSource">
            <summary>
            The first hit-testable item under the touch point. Determined by a combination of order in the tree and
            Z-order.
            </summary>
        </member>
        <member name="P:C1.Phone.C1GestureEventArgs.Handled">
            <summary>
            If an event handler sets this to true, it stops event bubbling.
            </summary>
        </member>
        <member name="T:C1.Phone.C1DragStartedGestureEventArgs">
            <summary>
            The event args used in the DragStarted event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragStartedGestureEventArgs.Direction">
            <summary>
            The direction of the drag gesture, as determined by the initial drag change.
            </summary>
        </member>
        <member name="T:C1.Phone.C1DragDeltaGestureEventArgs">
            <summary>
            The event args used by the DragDelta event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragDeltaGestureEventArgs.HorizontalChange">
            <summary>
            The horizontal (X) change for this drag event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragDeltaGestureEventArgs.VerticalChange">
            <summary>
            The vertical (Y) change for this drag event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragDeltaGestureEventArgs.Direction">
            <summary>
            The direction of the drag gesture, as determined by the initial drag change.
            </summary>
        </member>
        <member name="T:C1.Phone.C1DragCompletedGestureEventArgs">
            <summary>
            The event args used by the DragCompleted event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragCompletedGestureEventArgs.HorizontalChange">
            <summary>
            The total horizontal (X) change of the drag event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragCompletedGestureEventArgs.VerticalChange">
            <summary>
            The total vertical (Y) change of the drag event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragCompletedGestureEventArgs.Direction">
            <summary>
            The direction of the drag gesture, as determined by the initial drag change.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragCompletedGestureEventArgs.HorizontalVelocity">
            <summary>
            The final horizontal (X) velocity of the drag, if the drag was inertial.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DragCompletedGestureEventArgs.VerticalVelocity">
            <summary>
            The final vertical (Y) velocity of the drag, if the drag was inertial.
            </summary>
        </member>
        <member name="T:C1.Phone.C1FlickGestureEventArgs">
            <summary>
            The event args used by the Flick event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1FlickGestureEventArgs.HorizontalVelocity">
            <summary>
            The horizontal (X) velocity of the flick.
            </summary>
        </member>
        <member name="P:C1.Phone.C1FlickGestureEventArgs.VerticalVelocity">
            <summary>
            The vertical (Y) velocity of the flick.
            </summary>
        </member>
        <member name="P:C1.Phone.C1FlickGestureEventArgs.Angle">
            <summary>
            The angle of the flick.
            </summary>
        </member>
        <member name="P:C1.Phone.C1FlickGestureEventArgs.Direction">
            <summary>
            The direction of the flick gesture, as determined by the flick velocities.
            </summary>
        </member>
        <member name="T:C1.Phone.C1MultiTouchGestureEventArgs">
            <summary>
            The base class for multi-touch gesture event args. Currently used only for
            two-finger (pinch) operations.
            </summary>
        </member>
        <member name="M:C1.Phone.C1MultiTouchGestureEventArgs.GetPosition(System.Windows.UIElement,System.Int32)">
            <summary>
            Returns the position of either of the two touch points (0 or 1) relative to
            the UIElement provided.
            </summary>
            <param name="relativeTo">The return value will be relative to this element.</param>
            <param name="index">The touchpoint to use (0 or 1).</param>
            <returns>The gesture's starting point relative to the given UIElement.</returns>
        </member>
        <member name="M:C1.Phone.C1MultiTouchGestureEventArgs.GetPosition(System.Windows.UIElement,System.Double)">
            <summary>
            Gets the relative position between the two touch point. 
            0 gives you the first point whereas 1 gives you the second one.
            0.5 gives you the point in the middle between both touch points.
            </summary>
            <param name="relativeTo">The return value will be relative to this element.</param>
            <param name="index">The weighted factor between the touch points.</param>
            <returns></returns>
        </member>
        <member name="P:C1.Phone.C1MultiTouchGestureEventArgs.GestureOrigin2">
            <summary>
            The second touch point's initial position
            </summary>
        </member>
        <member name="P:C1.Phone.C1MultiTouchGestureEventArgs.TouchPosition2">
            <summary>
            The second touch point. The first is stored in C1GestureEventArgs.
            </summary>
        </member>
        <member name="T:C1.Phone.C1PinchStartedGestureEventArgs">
            <summary>
            The event args used by the PinchStarted event.
            </summary>
        </member>
        <member name="P:C1.Phone.C1PinchStartedGestureEventArgs.Distance">
            <summary>
            The distance between the two touch points.
            </summary>
        </member>
        <member name="P:C1.Phone.C1PinchStartedGestureEventArgs.Angle">
            <summary>
            The angle defined by the two touch points.
            </summary>
        </member>
        <member name="T:C1.Phone.C1PinchGestureEventArgs">
            <summary>
            The event args used by the PinchDelta and PinchCompleted events.
            </summary>
        </member>
        <member name="P:C1.Phone.C1PinchGestureEventArgs.DistanceRatio">
            <summary>
            Returns the ratio of the current distance between touchpoints / the original distance
            between the touchpoints.
            </summary>
        </member>
        <member name="P:C1.Phone.C1PinchGestureEventArgs.TotalAngleDelta">
            <summary>
            Returns the difference in angle between the current touch positions and the original
            touch positions.
            </summary>
        </member>
        <member name="T:C1.Phone.C1GestureListener">
            <summary>
            The C1GestureListener class raises events similar to those provided by the XNA TouchPanel, but it is designed for
            Silverlight's event-driven model, rather than XNA's loop/polling model, and it also takes care of the hit testing
            and event routing.
            </summary>
        </member>
        <member name="M:C1.Phone.C1GestureListener.Touch_FrameReported(System.Object,System.Windows.Input.TouchFrameEventArgs)">
            <summary>
            Handle touch events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:C1.Phone.C1GestureListener.TouchStart">
            <summary>
            A touch has started.
            </summary>
        </member>
        <member name="M:C1.Phone.C1GestureListener.TouchDelta">
            <summary>
            A touch is continuing...
            </summary>
        </member>
        <member name="M:C1.Phone.C1GestureListener.TouchComplete">
            <summary>
            A touch has ended.
            </summary>
        </member>
        <member name="M:C1.Phone.C1GestureListener.RaiseGestureEvent``1(System.Func{C1.Phone.C1GestureListener,System.EventHandler{``0}},System.Func{``0},System.Boolean)">
            <summary>
            This method does all the necessary work to raise a gesture event. It sets the orginal source, does the routing,
            handles Handled, and only creates the event args if they are needed.
            </summary>
            <typeparam name="T">This is the type of event args that will be raised.</typeparam>
            <param name="eventGetter">Gets the specific event to raise.</param>
            <param name="argsGetter">Lazy creator function for the event args.</param>
            <param name="releaseMouseCapture">Indicates whether the mouse capture should be released </param>
        </member>
        <member name="E:C1.Phone.C1GestureListener.GestureBegin">
            <summary>
            The GestureBegin event.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.GestureCompleted">
            <summary>
            The GestureCompleted event.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.Tap">
            <summary>
            The Tap event (touch, release, no movement).
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.DoubleTap">
            <summary>
            The DoubleTap event is raised instead of Tap if the time between two taps is short enough.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.Hold">
            <summary>
            The Hold event (touch and hold for one second)
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.DragStarted">
            <summary>
            The DragStarted event.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.DragDelta">
            <summary>
            The DragDelta event.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.DragCompleted">
            <summary>
            The DragCompleted event. Will be raised on touch release after a drag, or
            when a second touch point is added.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.Flick">
            <summary>
            The Flick event. Raised when a drag that was fast enough ends with a release.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.PinchStarted">
            <summary>
            The PinchStarted event.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.PinchDelta">
            <summary>
            Any two-touch point (two finger) operation.
            </summary>
        </member>
        <member name="E:C1.Phone.C1GestureListener.PinchCompleted">
            <summary>
            The end of a pinch operation.
            </summary>
        </member>
        <member name="T:C1.Phone.C1GestureService">
            <summary>
            The C1GestureService class is the helper for getting and setting GestureListeners
            on elements.
            </summary>
        </member>
        <member name="M:C1.Phone.C1GestureService.GetGestureListener(System.Windows.DependencyObject)">
            <summary>
            Gets a C1GestureListener for the new element. Will create a new one if necessary.
            </summary>
            <param name="obj">The object to get the C1GestureListener from.</param>
            <returns>Either the previously existing C1GestureListener, or a new one.</returns>
        </member>
        <member name="M:C1.Phone.C1GestureService.GetGestureListenerInternal(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Gets the C1GestureListener on an element. If one is not set, can create a new one
            so that this will never return null, depending on the state of the createIfMissing
            flag.
            </summary>
            <param name="obj">The object to get the C1GestureListener from.</param>
            <param name="createIfMissing">When this is true, if the attached property was not set on the element, it will create one and set it on the element.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.C1GestureService.SetGestureListener(System.Windows.DependencyObject,C1.Phone.C1GestureListener)">
            <summary>
            Sets the C1GestureListener on an element. Needed for XAML, but should not be used in code. Use
            GetGestureListener instead, which will create a new instance if one is not already set, to 
            add your handlers to an element.
            </summary>
            <param name="obj">The object to set the C1GestureListener on.</param>
            <param name="value">The C1GestureListener.</param>
        </member>
        <member name="M:C1.Phone.C1GestureService.SetGestureListenerInternal(System.Windows.DependencyObject,C1.Phone.C1GestureListener)">
            <summary>
            This is used to set the value of the attached DependencyProperty internally.
            </summary>
            <param name="obj">The object to set the C1GestureListener on.</param>
            <param name="value">The C1GestureListener.</param>
        </member>
        <member name="F:C1.Phone.C1GestureService.GestureListenerProperty">
            <summary>
            The definition of the C1GestureListener attached DependencyProperty.
            </summary>
        </member>
        <member name="M:C1.Phone.C1MathHelpers.GetAngle(System.Double,System.Double)">
            <summary>
            Return the angle of the hypotenuse of a triangle with
            sides defined by deltaX and deltaY.
            </summary>
            <param name="deltaX">Change in X.</param>
            <param name="deltaY">Change in Y.</param>
            <returns>The angle (in degrees).</returns>
        </member>
        <member name="M:C1.Phone.C1MathHelpers.GetDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Return the distance between two points
            </summary>
            <param name="p0">The first point.</param>
            <param name="p1">The second point.</param>
            <returns>The distance between the two points.</returns>
        </member>
        <member name="M:C1.Phone.C1MathHelpers.ToPoint(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Helper extension method for turning XNA's Vector2 type into a Point
            </summary>
            <param name="v">The Vector2.</param>
            <returns>The point.</returns>
        </member>
        <member name="T:C1.Phone.C1SafeRaise">
            <summary>
            A helper class for raising events safely.
            </summary>
        </member>
        <member name="M:C1.Phone.C1SafeRaise.Raise(System.EventHandler,System.Object)">
            <summary>
            Raises an event in a thread-safe manner, also does the null check.
            </summary>
            <param name="eventToRaise">The event to raise.</param>
            <param name="sender">The event sender.</param>
        </member>
        <member name="M:C1.Phone.C1SafeRaise.Raise(System.EventHandler{System.EventArgs},System.Object)">
            <summary>
            Raises an event in a thread-safe manner, also does the null check.
            </summary>
            <param name="eventToRaise">The event to raise.</param>
            <param name="sender">The event sender.</param>
        </member>
        <member name="M:C1.Phone.C1SafeRaise.Raise``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            Raises an event in a thread-safe manner, also does the null check.
            </summary>
            <typeparam name="T">The event args type.</typeparam>
            <param name="eventToRaise">The event to raise.</param>
            <param name="sender">The event sender.</param>
            <param name="args">The event args.</param>
        </member>
        <member name="M:C1.Phone.C1SafeRaise.Raise``1(System.EventHandler{``0},System.Object,C1.Phone.C1SafeRaise.GetEventArgs{``0})">
            <summary>
            Raise an event in a thread-safe manner, with the required null check. Lazily creates event args.
            </summary>
            <typeparam name="T">The event args type.</typeparam>
            <param name="eventToRaise">The event to raise.</param>
            <param name="sender">The event sender.</param>
            <param name="getEventArgs">The delegate to return the event args if needed.</param>
        </member>
        <member name="T:C1.Phone.C1SafeRaise.GetEventArgs`1">
            <summary>
            This is a method that returns event args, used for lazy creation.
            </summary>
            <typeparam name="T">The event type.</typeparam>
            <returns></returns>
        </member>
        <member name="T:C1.Phone.C1ContextMenu">
            <summary>
            The C1ContextMenu control represents a menu that can be displayed when the user clicks the right mouse button over a control.
            </summary>	
        </member>
        <member name="M:C1.Phone.C1ContextMenu.OnOpened(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Opened"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Phone.C1ContextMenu.OnClosed(System.EventArgs)">
            <summary>
            Raises the <see cref="E:Closed"/> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Phone.C1ContextMenu.OnItemTap(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            Raises the <see cref="E:ItemTap"/> event.
            </summary>
            <param name="sender">item that raised the event</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:C1.Phone.C1ContextMenu.Show(System.Windows.FrameworkElement,System.Windows.Point)">
            <summary>
            Displays the context menu at the specified position. 
            </summary>
            <param name="placementTarget">Specifies the control to which the context menu
            is associated.</param>
            <param name="offset">The offset coordinates where the context menu will be displayed.
            These coordinates are relative to the control specified in the control parameter.</param>
        </member>
        <member name="M:C1.Phone.C1ContextMenu.Hide">
            <summary>
            Hides the context menu
            </summary>
        </member>
        <member name="F:C1.Phone.C1ContextMenu.PlacementTargetProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ContextMenu.PlacementTarget"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ContextMenu.IsZoomEnabledProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ContextMenu.IsZoomEnabled"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1ContextMenu.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1ContextMenu"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ContextMenu.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1ContextMenu"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="E:C1.Phone.C1ContextMenu.Opened">
             <summary>
            Occurs when the C1ContextMenu opens.
             </summary>
        </member>
        <member name="E:C1.Phone.C1ContextMenu.Closed">
             <summary>
            Occurs when the C1ContextMenu closes.
             </summary>
        </member>
        <member name="E:C1.Phone.C1ContextMenu.ItemTap">
            <summary>
            Occurs when a child C1MenuItem is tapped.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ContextMenu.PlacementTarget">
            <summary>
            Gets or sets the FrameworkElement relative to which the C1ContextMenu is positioned when it opens. 
            </summary>
        </member>
        <member name="P:C1.Phone.C1ContextMenu.IsZoomEnabled">
            <summary>
            Gets or sets a value indicating whether the background will zoom out when the ContextMenu is open.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ContextMenuService">
            <summary>
            Represents a service that provides static methods to display a context menu. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1ContextMenuService.GetContextMenu(System.Windows.DependencyObject)">
            <summary>
            Gets the context menu for a control.
            </summary>
            <param name="element">The control from which the context menu is retrieved.</param>
            <returns>The control's context menu.</returns>
        </member>
        <member name="M:C1.Phone.C1ContextMenuService.SetContextMenu(System.Windows.DependencyObject,C1.Phone.C1ContextMenu)">
            <summary>
            Sets the context menu for a control.
            </summary>
            <param name="element">The Control to which the context menu is attached.</param>
            <param name="value">The context menu to set.</param>
        </member>
        <member name="F:C1.Phone.C1ContextMenuService.ContextMenuProperty">
            <summary>
            Identifies the ContextMenu dependency property. 
            </summary>
        </member>
        <member name="T:C1.Phone.C1ItemsControl">
            <summary>
            Represents a control that can be used to present a collection of items.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ItemsControl.ItemStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ItemsControl.ItemStyle"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ItemsControl.ItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ItemsControl.ItemTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ItemsControl.ItemTemplateSelectorProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ItemsControl.ItemTemplateSelector"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1ItemsControl.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1ItemsControl"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ItemsControl.ItemStyle">
            <summary>
            Style applied to all the items of this item control.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ItemsControl.ItemTemplate">
            <summary>
            Template applied to all the items of the list.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ItemsControl.ItemTemplateSelector">
            <summary>
            Template selector used to specify different templates applied to items of the same type.
            </summary>
            <remarks>
            Avoid doing complex tasks in the Select method such as accessing dictionaries because it could make the layout to work slow.
            </remarks>
        </member>
        <member name="M:C1.Phone.C1ListBoxViewport.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed vent.
            </summary>
            <param name="propertyName">Name of the property which changed.</param>
        </member>
        <member name="E:C1.Phone.C1ListBoxViewport.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:C1.Phone.C1LoopingList">
            <summary>
            List of items that simulate a circular list showing the first item after the last one.
            </summary>
        </member>
        <member name="F:C1.Phone.C1LoopingList.ShowUnselectedItemsProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1LoopingList.ShowUnselectedItems"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1LoopingList.ItemStyleProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1LoopingList.ItemStyle"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1LoopingList.IsCircularProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1LoopingList.IsCircular"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1LoopingList.ItemsHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1LoopingList.ItemsHeight"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1LoopingList.ItemsWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1LoopingList.ItemsWidth"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1LoopingList.IsVirtualizingProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1LoopingList.IsVirtualizing"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1LoopingList.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1LoopingList"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1LoopingList.GroupOwner">
            <summary>
            Gets or sets the reference to the owning control, implementing the <see cref="T:C1.Phone.ILoopingListGroupOwner"/> interface.
            </summary>
        </member>
        <member name="E:C1.Phone.C1LoopingList.ItemTap">
            <summary>
            Occurs when an item is tapped.
            </summary>
        </member>
        <member name="P:C1.Phone.C1LoopingList.ShowUnselectedItems">
            <summary>
            Gets or sets a value indicating whether the unselected items are shown or not.
            </summary>
        </member>
        <member name="P:C1.Phone.C1LoopingList.ItemStyle">
            <summary>
            Gets or sets the style applied to each item of the list.
            </summary>
        </member>
        <member name="P:C1.Phone.C1LoopingList.IsCircular">
            <summary>
            Gets or sets a value indicating whether the first item appears after the last or not.
            </summary>
        </member>
        <member name="P:C1.Phone.C1LoopingList.ItemsHeight">
            <summary>
            Gets or sets the height in pixels of each item.
            </summary>
        </member>
        <member name="P:C1.Phone.C1LoopingList.ItemsWidth">
            <summary>
            Gets or sets the width in pixels of each item.
            </summary>
        </member>
        <member name="P:C1.Phone.C1LoopingList.IsVirtualizing">
            <summary>
            Gets or sets a value indicating whether the looping panel will virtualize the creation of its items or not.
            </summary>
            <remarks>
            It is recommended to set this property to true when there are more than 50 items. Setting this property to true can make the gestures less smooth.
            </remarks>
        </member>
        <member name="T:C1.Phone.C1LoopingListItem">
            <summary>
            Visual element that represent each item of a <see cref="T:C1.Phone.C1LoopingList"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1LoopingListItem.ChangeVisualStateVisibility(System.Boolean)">
            <summary>
            Updates the current visual state of the Visibility visual state group to match the object's properties.
            </summary>
        </member>
        <member name="F:C1.Phone.C1LoopingListItem.IsVisibleProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1LoopingListItem.IsVisible"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1LoopingListItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1LoopingListItem"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1LoopingListItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1LoopingListItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1LoopingListItem.IsVisible">
            <summary>
            Gets or sets a value indicating whether this item is visible or not.
            </summary>
        </member>
        <member name="T:C1.Phone.C1LoopingPanel">
            <summary>
            Circular panel that shows the first item after the last one when is scrolled downward.
            </summary>
        </member>
        <member name="M:C1.Phone.C1LoopingPanel.CenterChild(System.Object,System.Boolean)">
            <summary>
            Scroll the list so that the specified item is located in the center of the viewport.
            </summary>
            <param name="item">The item to be centered.</param>
            <param name="animate">If set to <c>true</c> animates the scrolling.</param>
        </member>
        <member name="M:C1.Phone.C1LoopingPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1LoopingPanel"/>.
            </summary>
        </member>
        <member name="T:C1.Phone.C1MenuItem">
            <summary>
            Represents a selectable item inside a C1ContextMenu control.
            </summary>	
        </member>
        <member name="F:C1.Phone.C1MenuItem.HeaderProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MenuItem.Header"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1MenuItem.HeaderTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MenuItem.HeaderTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1MenuItem.CommandProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MenuItem.Command"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1MenuItem.CommandParameterProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1MenuItem.CommandParameter"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1MenuItem.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:C1.Phone.C1MenuItem.Header">
            <summary>
            Gets or sets the item that labels the control.
            </summary>
        </member>
        <member name="P:C1.Phone.C1MenuItem.HeaderTemplate">
            <summary>
            Gets or sets the template used to display the contents of the control's header.
            </summary>
        </member>
        <member name="P:C1.Phone.C1MenuItem.Command">
            <summary>
            Gets or sets the command associated with the menu item.
            </summary>
        </member>
        <member name="P:C1.Phone.C1MenuItem.CommandParameter">
            <summary>
            Gets or sets the parameter to pass to the Command property.
            </summary>
        </member>
        <member name="T:C1.Phone.C1Separator">
            <summary>
            Control that is used to separate items in C1ContextMenu.
            </summary>
        </member>
        <member name="M:C1.Phone.C1Separator.#ctor">
            <summary>
            Initializes a new instance of the C1Separator class.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ListBox">
            <summary>
            List of items which can be used with heavy templates and preview template to scroll quickly.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.ScrollingVisualStateName">
            <summary>
            Name of the visual state for when the list is scrolling
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.NotScrollingVisualStateName">
            <summary>
            Name of the visual state for when the list is not scrolling
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.ScrollingVisualStateGroupName">
            <summary>
            Name of the visual state group that has the scroll states in it
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBox.InitializeScrollViewerPart">
            <summary>
            Initializes the scroll viewer part.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBox.InitializePanel">
            <summary>
            Initializes the panel the first time it is loaded.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBox.GetIndexAt(System.Windows.Point)">
            <summary>
            Gets the index of the item at the specified position in the screen.
            </summary>
            <param name="screenPoint">The point in the screen relative to this control.</param>
            <returns>The index of the item, otherwise -1</returns>
        </member>
        <member name="M:C1.Phone.C1ListBox.GetAbsolutePoint(System.Windows.Point)">
            <summary>
            Gets a point in layout coordinates from a point in the screen.
            </summary>
            <param name="screenPoint">The screen point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.C1ListBox.ScrollToVerticalOffset(System.Double)">
            <summary>
            Scrolls the content to the specified vertical offset position.
            </summary>
            <param name="offset">The target vertical offset position.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.ScrollToHorizontalOffset(System.Double)">
            <summary>
            Scrolls the content to the specified horizontal offset position.
            </summary>
            <param name="offset">The target horizontal offset position.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own container.
            </summary>
            <param name="item">The item to check.</param>
            <returns>
            true if the item is (or is eligible to be) its own container; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Phone.C1ListBox.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element that is used to display the given item.
            </summary>
            <returns>
            The element that is used to display the given item.
            </returns>
        </member>
        <member name="M:C1.Phone.C1ListBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">The element used to display the specified item.</param>
            <param name="item">The item to display.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of the <see cref="M:System.Windows.Controls.ItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)"/> method.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.OnTap(System.Windows.Input.GestureEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.Tap"/> event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.OnHold(System.Windows.Input.GestureEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.Hold"/> event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.OnItemTap(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.Tap"/> event occurs in one of the items.
            </summary>
            <param name="sender">Element where the event occurs.</param>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.OnItemHold(System.Object,System.Windows.Input.GestureEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.Hold"/> event occurs in one of the items.
            </summary>
            <param name="sender">Element where the event occurs.</param>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.OnDoubleTap(System.Windows.Input.GestureEventArgs)">
            <summary>
            Called before the <see cref="E:System.Windows.UIElement.DoubleTap"/> event occurs.
            </summary>
            <param name="e">Event data for the event.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.BringIntoView(System.Windows.Rect,System.Action)">
            <summary>
            Brings the into view the specified rectangle area.
            </summary>
            <param name="area">The area which will be brought into view.</param>
            <param name="completed">The action to be called after the operation is completed.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.BringIndexIntoView(System.Int32,System.Windows.Rect,System.Action)">
            <summary>
            Brings the specified index into view.
            </summary>
            <param name="index">The index of the to bring into view.</param>
            <param name="subOffset">A sub area inside the item which can be used to scroll to a more specific point.</param>
            <param name="completed">Action called when the the animation completed.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.ZoomAnimation(System.Double,System.Windows.Point,System.Action)">
            <summary>
            Call a zooms animation.
            </summary>
            <param name="targetZoom">The target zoom.</param>
            <param name="screenPoint">A screen point where the animation is anchored.</param>
            <param name="completed">Action called when the the animation completed.</param>
        </member>
        <member name="M:C1.Phone.C1ListBox.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property which changed.</param>
        </member>
        <member name="F:C1.Phone.C1ListBox.ItemWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.ItemWidth"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.ItemHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.ItemHeight"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.PreviewItemTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.PreviewItemTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.RefreshWhileScrollingProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.RefreshWhileScrolling"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.ViewportGapProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.ViewportGap"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.ViewportPreviewGapProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.ViewportPreviewGap"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.ZoomProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.Zoom"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.MinZoomProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.MinZoom"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.MaxZoomProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.MaxZoom"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.ZoomModeProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.ZoomMode"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.VerticalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.VerticalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBox.HorizontalScrollBarVisibilityProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBox.HorizontalScrollBarVisibility"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1ListBox"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBox.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1ListBox"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1ListBox.Panel">
            <summary>
            Gets the panel associated with this items control.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBox.VerticalOffsetChanged">
            <summary>
            Occurs when the vertical offset changed.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBox.HorizontalOffsetChanged">
            <summary>
            Occurs when horizontal offset changed.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBox.ZoomChanged">
            <summary>
            Occurs when the zoom changed.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBox.ItemContainerLoaded">
            <summary>
            Occurs afer an item container was loaded.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBox.ItemContainerUnloading">
            <summary>
            Occurs before an item container was unloaded.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBox.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBox.ItemTap">
            <summary>
            Occurs when an item is tapped.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBox.ItemHold">
            <summary>
            Occurs when an item held.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.IsScrolling">
            <summary>
            Gets a value indicating whether the list is scrolling.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ScrollViewer">
            <summary>
            Gets the scroll viewer template part belonging to this items control.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ActualZoom">
            <summary>
            Gets the actual zoom.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ActualMinZoom">
            <summary>
            Gets the actual minimum zoom.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ActualMaxZoom">
            <summary>
            Gets the actual maximum zoom.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.IsZooming">
            <summary>
            Gets a value indicating whether this list is zooming.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ItemWidth">
            <summary>
            Gets or sets the width of each item.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ItemHeight">
            <summary>
            Gets or sets the height of each item.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.PreviewItemTemplate">
            <summary>
            Gets or sets the template used for previewing an item.
            </summary>
            <remarks>
            The use of preview item is due to performance reasons. 
            </remarks>
        </member>
        <member name="P:C1.Phone.C1ListBox.Orientation">
            <summary>
            Gets or sets the orientation in which the list is displayed.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.RefreshWhileScrolling">
            <summary>
            Gets or sets a value indicating whether the viewport must be refreshed while the scroll is running.
            
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ViewportGap">
            <summary>
            Gets or sets a coeficient which will determine in each layout pass the size of the viewport. If zero is specified the size of the viewport will be equal to the scrollviewer viewport. If 0.5 is specified the size of the viewport will be enlarged to take up half screen more at both sides of the original viewport.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ViewportPreviewGap">
            <summary>
            Gets or sets a coeficient which will determine in each layout pass the size of the viewport to render items in preview mode.
            </summary>
            <remarks>
            This coeficient must be greater to ViewportGap to take effect.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1ListBox.Zoom">
            <summary>
            Gets or set the zoom applied to this list.
            </summary>
            <remarks>
            The zoom will be conditioned to the MinZoom and MaxZoom properties in the following priority order MinZoom>MaxZoom>Zoom
            </remarks>
        </member>
        <member name="P:C1.Phone.C1ListBox.MinZoom">
            <summary>
            Gets or sets the minimum zoom available.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.MaxZoom">
            <summary>
            Gets or sets the maximum zoom available.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.ZoomMode">
            <summary>
            Gets or sets whether the zoom is enabled or disabled.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.VerticalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a vertical ScrollBar should be displayed.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBox.HorizontalScrollBarVisibility">
            <summary>
            Gets or sets a value that indicates whether a horizontal ScrollBar should be displayed.
            </summary>
        </member>
        <member name="T:C1.Phone.ZoomMode">
            <summary>
            Indicates the current mode for zoom behavior in the ScrollViewer content.
            </summary>
        </member>
        <member name="F:C1.Phone.ZoomMode.Disabled">
            <summary>
            Zoom of content is disabled.
            </summary>
        </member>
        <member name="F:C1.Phone.ZoomMode.Enabled">
            <summary>
            Zoom of content is enabled.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ListBoxItem">
            <summary>
            Visual element used inside a <see cref="T:C1.Phone.C1ListBox"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxItem.ChangeVisualStatePreview(System.Boolean)">
            <summary>
            Updates the current visual state of the Preview visual state group to match the object's properties.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxItem.ChangeVisualStateCommon(System.Boolean)">
            <summary>
            Updates the current visual state of the Common visual state group to match the object's properties.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBoxItem.StateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBoxItem.State"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBoxItem.PreviewContentProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBoxItem.PreviewContent"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBoxItem.PreviewContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBoxItem.PreviewContentTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxItem.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1ListBoxItem"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1ListBoxItem"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1ListBoxItem.State">
            <summary>
            Gets or sets the state of the item, which can be Preview or Full.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxItem.PreviewContent">
            <summary>
            Gets or sets the content of the preview state.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxItem.PreviewContentTemplate">
            <summary>
            Gets or sets the DataTemplate used when in preview state.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ListBoxItemState">
            <summary>
            State of a <see cref="T:C1.Phone.C1ListBoxItem"/>.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBoxItemState.Preview">
            <summary>
            Display the preview template of the <see cref="T:C1.Phone.C1ListBoxItem"/>.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBoxItemState.Full">
            <summary>
            Display the full template of the <see cref="T:C1.Phone.C1ListBoxItem"/>.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ListBoxPanel">
            <summary>
            Virtualizing stack panel which supports preview templates in order to scroll quickly.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1ListBoxPanel"/> class.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ListBoxPanel.ZoomProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ListBoxPanel.Zoom"/> dependency property.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.Refresh">
            <summary>
            Refreshes this instance by removing all the children and creating them again.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.OnClearChildren">
            <summary>
            Called when the collection of child elements is cleared by the base <see cref="T:System.Windows.Controls.Panel"/> class.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <summary>
            Called when the <see cref="P:System.Windows.Controls.ItemsControl.Items"/> collection that is associated with the <see cref="T:System.Windows.Controls.ItemsControl"/> for this <see cref="T:System.Windows.Controls.Panel"/> changes.
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> that raised the event.</param>
            <param name="args">Provides data for the <see cref="E:System.Windows.Controls.ItemContainerGenerator.ItemsChanged"/> event.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.AfterItemPrepared(C1.Phone.C1ListBoxItem)">
            <summary>
            Called after the item was prepared to be shown in the panel.
            </summary>
            <param name="listBoxItem">The item container which was just prepared.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.BeforeItemRecycled(C1.Phone.C1ListBoxItem)">
            <summary>
            Called before the item is recycled.
            </summary>
            <param name="listBoxItem">The item container to be recycled.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.AfterItemMeasure(System.Int32,System.Windows.Size)">
            <summary>
            Called after an item is measured in order to update scrolling structures.
            </summary>
            <param name="index">The index of the item which was measured.</param>
            <param name="desiredSize">The desired size of the item just measured.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.CalculateExtentSize">
            <summary>
            Calculates the extent size which determine the size of the panel.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ConvertFromLayoutCoordinates(System.Windows.Size)">
            <summary>
            Converts a size from layout coordinates to render coordinates.
            </summary>
            <param name="size">The size to be converted.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ConvertFromLayoutCoordinates(System.Windows.Point)">
            <summary>
            Converts a point from layout coordinates to render coordinates.
            </summary>
            <param name="size">The point to be converted.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ConvertFromLayoutCoordinates(System.Windows.Rect)">
            <summary>
            Converts a rectangle from layout coordinates to render coordinates.
            </summary>
            <param name="rect">The rectangle to be converted.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ConvertFromLayoutCoordinates(System.Double)">
            <summary>
            Converts a length from layout coordinates to render coordinates in order to implement zoom panel easily.
            </summary>
            <param name="length">The length to be converted.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ConvertToLayoutCoordinates(System.Windows.Size)">
            <summary>
            Converts a size from render coordinates to layout coordinates.
            </summary>
            <param name="size">The size to be converted.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ConvertToLayoutCoordinates(System.Windows.Rect)">
            <summary>
            Converts a rectangle from render coordinates to layout coordinates.
            </summary>
            <param name="area">The rectangle to be converted.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ConvertToLayoutCoordinates(System.Windows.Point)">
            <summary>
            Converts a point from render coordinates to layout coordinates.
            </summary>
            <param name="point">The point to be converted.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.ConvertToLayoutCoordinates(System.Double)">
            <summary>
            Converts a length from render coordinates to layout coordinates in order to implement zoom panel easily.
            </summary>
            <param name="length">The length to be converted.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.GetIndexAt(System.Windows.Point)">
            <summary>
            Gets the item index at the specified position.
            </summary>
            <param name="point">The point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.CalculateItemsInViewport(System.Windows.Rect,System.Int32@,System.Int32@)">
            <summary>
            Calculates the items that are in the viewport in order to virtualize and recycle unused items.
            </summary>
            <param name="viewport">The viewport dimensions in layout coordinates.</param>
            <param name="firstIndex">Index of the first visible item.</param>
            <param name="lastIndex">Index of the last visible item.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.GetItemPosition(System.Int32)">
            <summary>
            Gets the estimated position of an item in this panel.
            </summary>
            <param name="index">The index of the item to be queried.</param>
        </member>
        <member name="M:C1.Phone.C1ListBoxPanel.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="propertyName">Name of the property which changed.</param>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.Owner">
            <summary>
            Gets the items control which is parent of this panel.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.GeneratorForPanel">
            <summary>
            Gets the items container generator for this panel.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.Zoom">
            <summary>
            Gets or sets the zoom applied in this panel.
            </summary>
        </member>
        <member name="E:C1.Phone.C1ListBoxPanel.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.ItemWidth">
            <summary>
            Gets or sets the width of each item.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.ItemHeight">
            <summary>
            Gets or sets the height of each item.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.Padding">
            <summary>
            Gets the padding of the list of items.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.Orientation">
            <summary>
            Gets or sets the orientation in which the list is displayed.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.ViewportGap">
            <summary>
            Gets a coeficient which will determine in each layout pass the size of the viewport. 
            If zero is specified the size of the viewport will be equal to the scrollviewer viewport. 
            If 0.5 is specified the size of the viewport will be enlarged to take up half screen more at both sides of the original viewport.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.ViewportPreviewGap">
            <summary>
            Gets a coeficient which will determine in each layout pass the size of the viewport to render items in preview mode.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.ScrollViewer">
            <summary>
            Gets the scroll viewer associated with this panel.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.MeasureSize">
            <summary>
            Gets the size used to measure the items in the MeasureOverride method call.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ListBoxPanel.ActualZoom">
            <summary>
            Gets the actual zoom.
            </summary>
        </member>
        <member name="T:C1.Phone.C1TileListBox">
            <summary>
            List of items displayed in columns determined by the size of the items.
            </summary>
        </member>
        <member name="M:C1.Phone.C1TileListBox.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1TileListBox"/>.
            </summary>
        </member>
        <member name="T:C1.Phone.C1TileListBoxPanel">
            <summary>
            Virtualizing panel which render the items in columns depending on the size of the items.
            </summary>
        </member>
        <member name="M:C1.Phone.C1TileListBoxPanel.GetIndexAt(System.Windows.Point)">
            <summary>
            Gets the item index at the specified position.
            </summary>
            <param name="point">The point.</param>
        </member>
        <member name="M:C1.Phone.C1TileListBoxPanel.CalculateExtentSize">
            <summary>
            Calculates the extent size which determine the size of the panel.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.C1TileListBoxPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.
            </summary>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity"/>) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <returns>
            The size that this object determines it needs during layout, based on its calculations of the allocated sizes for child objects; or based on other considerations, such as a fixed container size.
            </returns>
        </member>
        <member name="M:C1.Phone.C1TileListBoxPanel.AfterItemMeasure(System.Int32,System.Windows.Size)">
            <summary>
            Called after an item is measured in order to update scrolling structures.
            </summary>
            <param name="index">The index of the item which was measured.</param>
            <param name="desiredSize">The desired size of the item just measured.</param>
        </member>
        <member name="M:C1.Phone.C1TileListBoxPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.
            </summary>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <returns>
            The actual size that is used after the element is arranged in layout.
            </returns>
        </member>
        <member name="P:C1.Phone.C1TileListBoxPanel.VisibleColumnsCount">
            <summary>
            Gets the number of visible columns or rows depending on the <see cref="T:System.Windows.Controls.Orientation"/>.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ZoomUnit">
            <summary>
            Represent a zoom which can be expresed like a fixed value, or relative to the viewport.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ZoomUnit.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1ZoomUnit"/> struct.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ZoomUnit.#ctor(System.Double,C1.Phone.C1ZoomUnitType)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1ZoomUnit"/> struct.
            </summary>
            <param name="value">The value.</param>
            <param name="type">The type of unit used to express the zoom.</param>
        </member>
        <member name="M:C1.Phone.C1ZoomUnit.op_Equality(C1.Phone.C1ZoomUnit,C1.Phone.C1ZoomUnit)">
            <summary>
            Compares two C1ZoomUnit structures for equality.
            </summary>
            <param name="gl1">The first instance of C1ZoomUnit to compare.</param>
            <param name="gl2">The second instance of C1ZoomUnit to compare.</param>
            <returns>true if the two instances of C1ZoomUnit have the same value and C1ZoomUnitType; otherwise, false.</returns>
        </member>
        <member name="M:C1.Phone.C1ZoomUnit.op_Inequality(C1.Phone.C1ZoomUnit,C1.Phone.C1ZoomUnit)">
            <summary>
            Compares two C1ZoomUnit structures to determine if they are not equal.
            </summary>
            <param name="gl1">The first instance of C1ZoomUnit to compare.</param>
            <param name="gl2">The second instance of C1ZoomUnit to compare.</param>
            <returns>true if the two instances of C1ZoomUnit do not have the same value and C1ZoomUnitType; otherwise, false.</returns>
        </member>
        <member name="M:C1.Phone.C1ZoomUnit.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
            	<c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Phone.C1ZoomUnit.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:C1.Phone.C1ZoomUnit.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:C1.Phone.C1ZoomUnit.Type">
            <summary>
            Gets the type of unit.
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:C1.Phone.C1ZoomUnit.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:C1.Phone.C1ZoomUnit.IsFixed">
            <summary>
            Gets a value indicating whether the zoom is a fixed value.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ZoomUnit.IsFill">
            <summary>
            Gets a value indicating whether the zoom will be adjusted to fill the viewport.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ZoomUnit.IsOneItem">
            <summary>
            Gets a value indicating whether the zoom will be adjusted to show one item entirely.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ZoomUnit.Fill">
            <summary>
            Gets the zoom which auto-adjust to fill the viewport.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ZoomUnit.OneItem">
            <summary>
            Gets the zoom which auto-adjust to show one item entirely in the viewport.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ZoomUnitType">
            <summary>
            Represent the kind of zoom.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ZoomUnitType.Fixed">
            <summary>
            Represent a zoom determined by a fixed value, where 1 means no zoom.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ZoomUnitType.Fill">
            <summary>
            Represent a zoom value which is relative to the viewport, and is adjusted to fill the viewport.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ZoomUnitType.OneItem">
            <summary>
            Represent a zoom value which is relative to the viewport, and is adjusted to show one item entirely.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ZoomUnitTypeConverter">
            <summary>
            Converts a string to a <see cref="T:C1.Phone.C1ZoomUnit"/> and vice versa.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ZoomUnitTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether the type converter can convert an object from the specified type to the type of this converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="sourceType">The type you want to convert from.</param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:C1.Phone.C1ZoomUnitTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts from the specified value to the intended conversion type of the converter.
            </summary>
            <param name="context">An object that provides a format context.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.</param>
            <param name="value">The value to convert to the type of this converter.</param>
            <returns>
            The converted value.
            </returns>
            <exception cref="T:System.NotImplementedException">
              <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)"/> not implemented in base <see cref="T:System.ComponentModel.TypeConverter"/>.</exception>
        </member>
        <member name="T:C1.Phone.C1Popup">
            <summary>
            Enhanced popup with support for Back key and orientations.
            </summary>
        </member>
        <member name="F:C1.Phone.C1Popup.IsOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1Popup.IsOpen"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1Popup.HideTrayBarWhenOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1Popup.HideTrayBarWhenOpen"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1Popup.HideApplicationBarWhenOpenProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1Popup.HideApplicationBarWhenOpen"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1Popup.ContentProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1Popup.Content"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1Popup.ContentTemplateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1Popup.ContentTemplate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1Popup.IsAnimationEnabledProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1Popup.IsAnimationEnabled"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1Popup.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1Popup"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1Popup.IsOpen">
            <summary>
            Gets or sets a value indicating whether this popup is open or not.
            </summary>
        </member>
        <member name="E:C1.Phone.C1Popup.IsOpenChanged">
            <summary> 
            Event raised when the <see cref="P:IsOpen"/> property has changed.
            </summary>
        </member>
        <member name="P:C1.Phone.C1Popup.HideTrayBarWhenOpen">
            <summary>
            Gets or sets a value indicating whether the tray bar must be hidden when the popup is open.
            </summary>
        </member>
        <member name="P:C1.Phone.C1Popup.HideApplicationBarWhenOpen">
            <summary>
            Gets or sets a value indicating whether the application bar must be hidden when the popup is open.
            </summary>
        </member>
        <member name="P:C1.Phone.C1Popup.Content">
            <summary>
            Gets or sets the value of the wrapped ContentControl Content property.
            </summary>
        </member>
        <member name="P:C1.Phone.C1Popup.ContentTemplate">
            <summary>
            Gets or sets the data template that is used to display the content of the wrapped ContentControl.
            </summary>
        </member>
        <member name="P:C1.Phone.C1Popup.IsAnimationEnabled">
            <summary>
            Gets or sets the <see cref="T:System.Boolean"/> value specifying whether control plays animations.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ProgressBar">
            <summary>
            C1ProgressBar represents a control that indicates indeterminate progress of an operation.
            </summary>	
        </member>
        <member name="F:C1.Phone.C1ProgressBar._visualStateGroup">
            The visual state group reference used to wait until the hidden state
            has fully transitioned to flip the underlying progress bar's
            indeterminate value to False.
        </member>
        <member name="M:C1.Phone.C1ProgressBar.ChangeVisualStateVisibility(System.Boolean)">
            <summary>
            Updates the current visual state of the Visibility visual state group to match the object's properties.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ProgressBar.ActualIsIndeterminateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ProgressBar.ActualIsIndeterminate"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ProgressBar.IsIndeterminateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ProgressBar.IsIndeterminate"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1ProgressBar.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1ProgressBar"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ProgressBar.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1ProgressBar"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1ProgressBar.ActualIsIndeterminate">
            <summary>
            Gets or sets the value indicating whether the actual indeterminate property should be reflecting a particular value.
            
            </summary>
        </member>
        <member name="P:C1.Phone.C1ProgressBar.IsIndeterminate">
            <summary>
            Gets or sets a value indicating whether the control is in the indeterminate state.
            
            </summary>
        </member>
        <member name="T:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl">
            <summary>
            A very specialized primitive control that works around a specific visual
            state manager issue. The platform does not support relative sized
            translation values, and this special control walks through visual state
            animation storyboards looking for magic numbers to use as percentages.
            This control is not supported, unofficial, and is a hack in many ways.
            It is used to enable a Windows Phone native platform-style progress bar
            experience in indeterminate mode that remains performant.
            </summary>
        </member>
        <member name="F:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.SimpleDoubleComparisonEpsilon">
            <summary>
            A simple Epsilon-style value used for trying to determine the magic 
            state, if any, of a double.
            </summary>
        </member>
        <member name="F:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl._knownWidth">
            <summary>
            The last known width of the control.
            </summary>
        </member>
        <member name="F:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl._knownHeight">
            <summary>
            The last known height of the control.
            </summary>
        </member>
        <member name="F:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl._specialAnimations">
            <summary>
            A set of custom animation adapters used to update the animation
            storyboards when the size of the control changes.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.#ctor">
            <summary>
            Initializes a new instance of the RelativeAnimatingContentControl
            type.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.OnSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Handles the size changed event.
            </summary>
            <param name="sender">The source object.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.UpdateAnyAnimationValues">
            <summary>
            Walks through the known storyboards in the control's template that
            may contain magic double animation values, storing them for future
            use and updates.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.UpdateKnownAnimations">
            <summary>
            Walks through all special animations, updating based on the current
            size of the control.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.ProcessDoubleAnimationWithKeys(System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames)">
            <summary>
            Processes a double animation with keyframes, looking for known 
            special values to store with an adapter.
            </summary>
            <param name="da">The double animation using key frames instance.</param>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.ProcessDoubleAnimation(System.Windows.Media.Animation.DoubleAnimation)">
            <summary>
            Processes a double animation looking for special values.
            </summary>
            <param name="da">The double animation instance.</param>
        </member>
        <member name="T:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationDimension">
            <summary>
            A selection of dimensions of interest for updating an animation.
            </summary>
        </member>
        <member name="F:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationDimension.Width">
            <summary>
            The width (horizontal) dimension.
            </summary>
        </member>
        <member name="F:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationDimension.Height">
            <summary>
            The height (vertical) dimension.
            </summary>
        </member>
        <member name="T:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.AnimationValueAdapter">
            <summary>
            A simple class designed to store information about a specific 
            animation instance and its properties. Able to update the values at
            runtime.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.AnimationValueAdapter.#ctor(C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationDimension)">
            <summary>
            Initializes a new instance of the AnimationValueAdapter type.
            </summary>
            <param name="dimension">The dimension of interest for updates.</param>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.AnimationValueAdapter.UpdateWithNewDimension(System.Double,System.Double)">
            <summary>
            Updates the original instance based on new dimension information
            from the control. Takes both and allows the subclass to make the
            decision on which ratio, values, and dimension to use.
            </summary>
            <param name="width">The width of the control.</param>
            <param name="height">The height of the control.</param>
        </member>
        <member name="P:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.AnimationValueAdapter.Dimension">
            <summary>
            Gets the dimension of interest for the control.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.GetValue">
            <summary>
            Gets the value of the underlying property of interest.
            </summary>
            <returns>Returns the value of the property.</returns>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.SetValue(System.Double)">
            <summary>
            Sets the value for the underlying property of interest.
            </summary>
            <param name="newValue">The new value for the property.</param>
        </member>
        <member name="F:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1._ratio">
            <summary>
            The ratio based on the original magic value, used for computing
            the updated animation property of interest when the size of the
            control changes.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.#ctor(C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationDimension,`0)">
            <summary>
            Initializes a new instance of the GeneralAnimationValueAdapter
            type.
            </summary>
            <param name="d">The dimension of interest.</param>
            <param name="instance">The animation type instance.</param>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.StripMagicNumberOff(System.Double)">
            <summary>
            Approximately removes the magic number state from a value.
            </summary>
            <param name="number">The initial number.</param>
            <returns>Returns a double with an adjustment for the magic
            portion of the number.</returns>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.GetDimensionFromMagicNumber(System.Double)">
            <summary>
            Retrieves the dimension, if any, from the number. If the number
            is not magic, null is returned instead.
            </summary>
            <param name="number">The double value.</param>
            <returns>Returs a double animation dimension, if the number was
            partially magic; otherwise, returns null.</returns>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.UpdateWithNewDimension(System.Double,System.Double)">
            <summary>
            Updates the animation instance based on the dimensions of the
            control.
            </summary>
            <param name="width">The width of the control.</param>
            <param name="height">The height of the control.</param>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.UpdateValue(System.Double)">
            <summary>
            Updates the value of the property.
            </summary>
            <param name="sizeToUse">The size of interest to use with a ratio
            computation.</param>
        </member>
        <member name="P:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.Instance">
            <summary>
            Stores the animation instance.
            </summary>
        </member>
        <member name="P:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.GeneralAnimationValueAdapter`1.InitialValue">
            <summary>
            Gets the initial value (minus the magic number portion) that the
            designer stored within the visual state animation property.
            </summary>
        </member>
        <member name="T:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationToAdapter">
            <summary>
            Adapter for DoubleAnimation's To property.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationToAdapter.GetValue">
            <summary>
            Gets the value of the underlying property of interest.
            </summary>
            <returns>Returns the value of the property.</returns>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationToAdapter.SetValue(System.Double)">
            <summary>
            Sets the value for the underlying property of interest.
            </summary>
            <param name="newValue">The new value for the property.</param>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationToAdapter.#ctor(C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationDimension,System.Windows.Media.Animation.DoubleAnimation)">
            <summary>
            Initializes a new instance of the DoubleAnimationToAdapter type.
            </summary>
            <param name="dimension">The dimension of interest.</param>
            <param name="instance">The instance of the animation type.</param>
        </member>
        <member name="T:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationFromAdapter">
            <summary>
            Adapter for DoubleAnimation's From property.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationFromAdapter.GetValue">
            <summary>
            Gets the value of the underlying property of interest.
            </summary>
            <returns>Returns the value of the property.</returns>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationFromAdapter.SetValue(System.Double)">
            <summary>
            Sets the value for the underlying property of interest.
            </summary>
            <param name="newValue">The new value for the property.</param>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationFromAdapter.#ctor(C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationDimension,System.Windows.Media.Animation.DoubleAnimation)">
            <summary>
            Initializes a new instance of the DoubleAnimationFromAdapter 
            type.
            </summary>
            <param name="dimension">The dimension of interest.</param>
            <param name="instance">The instance of the animation type.</param>
        </member>
        <member name="T:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationFrameAdapter">
            <summary>
            Adapter for double key frames.
            </summary>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationFrameAdapter.GetValue">
            <summary>
            Gets the value of the underlying property of interest.
            </summary>
            <returns>Returns the value of the property.</returns>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationFrameAdapter.SetValue(System.Double)">
            <summary>
            Sets the value for the underlying property of interest.
            </summary>
            <param name="newValue">The new value for the property.</param>
        </member>
        <member name="M:C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationFrameAdapter.#ctor(C1.Phone.ProgressBarInternal.C1RelativeAnimatingContentControl.DoubleAnimationDimension,System.Windows.Media.Animation.DoubleKeyFrame)">
            <summary>
            Initializes a new instance of the DoubleAnimationFrameAdapter
            type.
            </summary>
            <param name="dimension">The dimension of interest.</param>
            <param name="frame">The instance of the animation type.</param>
        </member>
        <member name="F:Public.RunTimeNameSuffix">
            <summary>
            Defines the WPF platform specific suffix of a run-time assembly name.
            </summary>
        </member>
        <member name="F:Public.DesignTimeNet4NameSuffix">
            <summary>
            Defines the WPF platform specific suffix of a VS2010/Blend3-4 design-time assembly name.
            </summary>
        </member>
        <member name="F:Public.DesignTimeNet45NameSuffix">
            <summary>
            Defines the WPF platform specific suffix of a VS2012 design-time assembly name.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Resources.C1_Silverlight">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Resources.Common`1">
            <summary>
            A helper base for resource strongly-typed resource class
            that reads resources from the application assembly.
            </summary>
            <typeparam name="R">The strongly-typed resource subclass</typeparam>
        </member>
        <member name="P:C1.Silverlight.Resources.Common`1.ResourceManager">
            <summary>
            Loads resource managers for the application and the assembly.
            </summary>
        </member>
        <member name="T:C1.Silverlight.Resources.Common`1.S">
            <summary>
            Dummy class to make GetString work.
            </summary>
        </member>
        <member name="M:C1.Silverlight.Resources.Common`1.S.GetString(System.String,System.Globalization.CultureInfo)">
            <summary>
            Calls resourceManApp.GetString and if that fails, resourceManC1.GetString.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.Cancel">
            <summary>
              Looks up a localized string similar to Cancel.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.Close">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.CloseGlobal">
            <summary>
              Looks up a localized string similar to Close Selected Item.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.Menu">
            <summary>
              Looks up a localized string similar to Menu.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.Next">
            <summary>
              Looks up a localized string similar to Next.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.No">
            <summary>
              Looks up a localized string similar to No.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.OK">
            <summary>
              Looks up a localized string similar to OK.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.Pin">
            <summary>
              Looks up a localized string similar to Pin.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.UnPin">
            <summary>
              Looks up a localized string similar to UnPin.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.Previous">
            <summary>
              Looks up a localized string similar to Previous.
            </summary>
        </member>
        <member name="P:C1.Silverlight.Resources.C1_Silverlight.Yes">
            <summary>
              Looks up a localized string similar to Yes.
            </summary>
        </member>
        <member name="T:C1.Phone.C1DataTemplateSelector">
            <summary>
            Provides a way to apply data templates based on custom logic.
            </summary>
        </member>
        <member name="M:C1.Phone.C1DataTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, returns a DataTemplate based on custom logic.
            </summary>
            <param name="item">The data object for which to select the template.</param>
            <param name="container">The data-bound object.</param>
            <returns>Returns a DataTemplate or nullNothingnullptra null reference.</returns>
        </member>
        <member name="P:C1.Phone.C1DataTemplateSelector.Resources">
            <summary>
            Gets the locally defined resource dictionary. 
            </summary>
        </member>
        <member name="T:C1.Phone.C1StyleSelector">
            <summary>
            Provides a way to apply styles based on custom logic.
            </summary>
        </member>
        <member name="M:C1.Phone.C1StyleSelector.SelectStyle(System.Object,System.Windows.DependencyObject)">
            <summary>
            When overridden in a derived class, returns a Style based on custom logic.
            </summary>
            <param name="item">The content.</param>
            <param name="container">The element to which the style will be applied.</param>
            <returns>Returns an application-specific style to apply; otherwise, null.</returns>
        </member>
        <member name="P:C1.Phone.C1StyleSelector.Resources">
            <summary>
            Gets the locally defined resource dictionary. 
            </summary>
        </member>
        <member name="F:C1.Phone.IndexOffset`1.Index">
            <summary>
            The number of elements before the current position.
            </summary>
        </member>
        <member name="F:C1.Phone.IndexOffset`1.Offset">
            <summary>
            The sum of the lengths of the elements before the current position.
            </summary>
        </member>
        <member name="T:C1.Phone.IAggregator`1">
            <summary>
            An ordered monoid.
            </summary>
        </member>
        <member name="M:C1.Phone.AggregatingTable`2.TotalLength">
            <summary>
            The sum of the length of all elements.
            </summary>
        </member>
        <member name="M:C1.Phone.AggregatingTable`2.GetLength(System.Int32)">
            <summary>
            The individual length of this element.
            </summary>
        </member>
        <member name="M:C1.Phone.AggregatingTable`2.FindByIndex(System.Int32)">
            <summary>
            The record for index.  If index is the element count, Offset equals the total length.
            </summary>
        </member>
        <member name="M:C1.Phone.AggregatingTable`2.FindByLength(`0)">
            <summary>
            The last element with Offset less than or equal to the argument.  May return Index one past the end.
            </summary>
        </member>
        <member name="T:C1.Phone.C1KeyEventArgs">
            <summary>
            Substitutes Silverlight KeyEventArgs in key handlers to enable testing
            </summary>
        </member>
        <member name="T:C1.Phone.CharConverter">
            <summary>
            Converts chars to strings.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ProjectThicknessConverter">
            <summary>
            Converter used to extract a specific member of a thickness structure.
            </summary>
        </member>
        <member name="T:C1.Phone.C1SideRadiusConverter">
            <summary>
            Converter used to bind specific inner element corner radius to 
            the control CornerRadius.
            </summary>
        </member>
        <member name="T:C1.Phone.C1SideThicknessConverter">
            <summary>
            Converter used to bind specific sides of inner elements thickness to 
            the main control thickness.
            </summary>
        </member>
        <member name="T:C1.Phone.CustomConverter">
            <summary>
            Converter which receive a function to convert the value
            </summary>
        </member>
        <member name="M:C1.Phone.CustomConverter.#ctor(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object},System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.CustomConverter"/> class.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <param name="converterBackFunction">The convert back function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=&gt;
            {
                return; //Put the converter code here
            });
            </code>
            </example>
        </member>
        <member name="M:C1.Phone.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
            <summary>
            Creates the specified converter function.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
            <returns>The converted value</returns>
        </member>
        <member name="M:C1.Phone.CustomConverter.Create(System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object},System.Func{System.Object,System.Type,System.Object,System.Globalization.CultureInfo,System.Object})">
            <summary>
            Creates the specified converter function.
            </summary>
            <param name="converterFunction">The converter function. (value, type, parameter, culture)</param>
            <param name="converterBackFunction">The convert back function. (value, type, parameter, culture)</param>
            <example>
            <code>
            var converter = CustomConverter.Create((value, type, parameter, culture)=>
            {
                return; //Put the converter code here
            });
            </code>
            </example>
            <returns>The converted value</returns>
        </member>
        <member name="M:C1.Phone.CustomConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the source data before passing it to the target for display in the UI.
            </summary>
            <param name="value">The source data being passed to the target.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the target dependency property.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the target dependency property.
            </returns>
        </member>
        <member name="M:C1.Phone.CustomConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Modifies the target data before passing it to the source object.  This method is called only in <see cref="F:System.Windows.Data.BindingMode.TwoWay"/> bindings.
            </summary>
            <param name="value">The target data being passed to the source.</param>
            <param name="targetType">The <see cref="T:System.Type"/> of data expected by the source object.</param>
            <param name="parameter">An optional parameter to be used in the converter logic.</param>
            <param name="culture">The culture of the conversion.</param>
            <returns>
            The value to be passed to the source object.
            </returns>
        </member>
        <member name="T:C1.Phone.VisibilityConverter">
            <summary>
            Converter from/to Visibility and Boolean.
            </summary>
            <remarks>
            true = Visible
            false = Collapsed
            </remarks>
        </member>
        <member name="M:C1.Phone.VisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.VisibilityConverter"/> class.
            </summary>
        </member>
        <member name="P:C1.Phone.VisibilityConverter.Opposite">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:C1.Phone.VisibilityConverter"/> is opposite.
            </summary>
            <value><c>true</c> if opposite; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:C1.Phone.ZoomToScaleTransformConverter">
            <summary>
            Converts a double value to a <see cref="T:System.Windows.Media.ScaleTransform"/>.
            </summary>
        </member>
        <member name="T:C1.Phone.Extensions">
            <summary>
            Class that provides static extension methods for several other classes.
            </summary>
        </member>
        <member name="M:C1.Phone.Extensions.FindParent``1(System.Windows.FrameworkElement)">
            <summary>
            Finds the first parent of a given type for a particular FrameworkElement
            </summary>
            <returns>
            <returns>The first object whose type is <typeparam name="T"/></returns>
            </returns>
        </member>
        <member name="M:C1.Phone.Extensions.GetAllParents(System.Windows.FrameworkElement)">
            <summary>
            Returns all the parents in the visual tree
            </summary>
            <returns>The list of ancestor framework elements in the visual tree hierarchy</returns>
        </member>
        <member name="M:C1.Phone.Extensions.GetAllChildren``1(System.Windows.FrameworkElement)">
            <summary>
            Finds all the children of a given type for a particular FrameworkElement
            </summary>
        </member>
        <member name="M:C1.Phone.Extensions.GetVisualStateGroup(System.Windows.FrameworkElement,System.String)">
            <summary>
            Gets the VisualStateGroup with the given name, looking up the visual tree
            </summary>
            <param name="root">Element to start from</param>
            <param name="groupName">Name of the group to look for</param>
            <returns>The group, if found, or null</returns>
        </member>
        <member name="M:C1.Phone.Extensions.GetParentsPopup(System.Windows.FrameworkElement)">
            <summary>
            Includes the argument (if not null)
            When it finds an open Popup that has a parent it traverses up through the parent, not adding the popup to the list
            </summary>
        </member>
        <member name="M:C1.Phone.Extensions.GetRoot(System.Windows.FrameworkElement)">
            <summary>
            Get the root <see cref="T:System.Windows.FrameworkElement"/> in the logical hierarchy
            </summary>
            <returns>Root element of the visual tree</returns>
        </member>
        <member name="M:C1.Phone.Extensions.RemoveFromParent(System.Windows.FrameworkElement)">
            <summary>
            Removes the element from its parent
            </summary>
        </member>
        <member name="M:C1.Phone.Extensions.FindChild(System.Windows.FrameworkElement,System.Predicate{System.Windows.FrameworkElement})">
            <summary>
            Looks for a child of the element that satisfies a given predicate.
            </summary>
            <param name="root">The root FrameworkElement</param>
            <param name="pred">The predicate to satisfy.</param>
            <returns>The first child that satisfies the predicate in breadth first order, or null if no child satisfies the predicate.</returns>
        </member>
        <member name="F:C1.Phone.Extensions._bindingMarker">
            <summary>
            Identifies our own bindings.
            </summary>
        </member>
        <member name="M:C1.Phone.Extensions.SetBinding``1(System.Windows.FrameworkElement,System.Windows.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
            <typeparam name="T">Type of the source</typeparam>
            <param name="target">The target.</param>
            <param name="dp">The dependency property which will be set.</param>
            <param name="source">The source.</param>
            <param name="expr">Expression that returns a property of the source object.</param>
        </member>
        <member name="M:C1.Phone.Extensions.SetBinding``1(System.Windows.FrameworkElement,System.Windows.DependencyProperty,``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Windows.Data.IValueConverter)">
            <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
            <typeparam name="T">Type of the source</typeparam>
            <param name="target">The target.</param>
            <param name="dp">The dependency property which will be set.</param>
            <param name="source">The source.</param>
            <param name="expr">Expression that returns a property of the source object.</param>
            <param name="converter">The converter that will be applied to the created binding object.</param>
        </member>
        <member name="M:C1.Phone.Extensions.SetBinding(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Object,System.String)">
            <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
            <param name="target">The target.</param>
            <param name="dp">The dependency property which will be set.</param>
            <param name="source">The source.</param>
            <param name="sourcePropertyName">Name of the source property.</param>
        </member>
        <member name="M:C1.Phone.Extensions.SetBinding(System.Windows.FrameworkElement,System.Windows.DependencyProperty,System.Object,System.String,System.Windows.Data.IValueConverter)">
            <summary>
            Sets the binding if the dependency property has not been set previously and the style of the element don't set the property.
            </summary>
        </member>
        <member name="M:C1.Phone.Extensions.InvalidateVisualTree(System.Windows.FrameworkElement)">
            <summary>
            Invalidates the measure of the children recursively.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:C1.Phone.Extensions.InvalidateVisualTreeArrange(System.Windows.FrameworkElement)">
            <summary>
            Invalidates the arrange of the children recursively.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:C1.Phone.Extensions.ScrollIntoView(System.Windows.Controls.ScrollViewer,System.Windows.FrameworkElement)">
            <summary>
            Changes the scroll offset of a <see cref="T:System.Windows.Controls.ScrollViewer"/> so that an element becomes visible.
            </summary>
            <param name="sv"><see cref="T:System.Windows.Controls.ScrollViewer"/> to scroll</param>
            <param name="elem"><see cref="T:System.Windows.FrameworkElement"/> to show</param>
        </member>
        <member name="M:C1.Phone.Extensions.ScrollIntoView(System.Windows.Controls.ScrollViewer,System.Windows.Rect)">
            <summary>
            Changes the scroll offset of a ScrollView so that a rectangle is visible.
            </summary>
            <param name="sv">ScrollViewer to scroll</param>
            <param name="r">Rectangle to show</param>
        </member>
        <member name="M:C1.Phone.Extensions.GetPropertyValue``1(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.Extensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of a property or property path of the specified object.
            </summary>
            <remarks>
            This extension DON'T evaluate ICustomTypeDescriptor interface. 
            Use generic extension with the same name if you are evaluating the path 
            of a DataTable or any object that implements ICustomTypeDescriptor.
            </remarks>
            <param name="target">The target object.</param>
            <param name="path">The name of the property or the property path.</param>
            <returns>The value contained in the property</returns>
        </member>
        <member name="M:C1.Phone.Extensions.New``1(System.Type)">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:C1.Phone.Extensions.New``1(System.Type,System.Action{``0})">
            <summary>
            Creates a new instance of this type using the default constructor.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type">The type.</param>
            <param name="initializers">The initializers.</param>
            <returns>A new instance of type T</returns>
        </member>
        <member name="M:C1.Phone.Extensions.GetNonNullableType(System.Type)">
            <summary>
            Returns the underlying type of a nullable type:
            e.g. if Type = double?, then return double.
            </summary>
            <param name="type">Type.</param>
            <returns>The underlying type.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.IsNullableType(System.Type)">
            <summary>
            Returns true if the type is a nullable type.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is nullable.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.IsNumeric(System.Type)">
            <summary>
            Returns true if the type is any of the numeric data types:
            double, float, int, uint, long, ulong, short, ushort, sbyte, byte and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is numeric.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.IsNumericIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the integral numeric data types:
            int, uint, long, ulong, short, ushort, sbyte and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an integral numeric.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.IsNumericIntegralSigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral signed numeric data types:
            int, long, short and sbyte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a signed integral numeric.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.IsNumericIntegralUnsigned(System.Type)">
            <summary>
            Returns true if the type is any of the integral unsigned numeric data types:
            uint, ulong, ushort and byte.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is an unsigned integral numeric.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.IsNumericNonIntegral(System.Type)">
            <summary>
            Returns true if the type is any of the numeric non-integral data types:
            double, float and decimal.
            </summary>
            <param name="type">Type.</param>
            <returns>True if the type is a non-integral numeric.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.GetEnumValues``1(System.Type)">
            <summary>
            Returns the values of an Enum type (Type.IsEnum == true).
            </summary>
            <typeparam name="T">Enum type.</typeparam>
            <param name="enumType">Enum type.</param>
            <returns>The list of values for that enum type.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.GetAbsoluteUri(System.String)">
            <summary>
            Returns the absolute <see cref="T:System.Uri"/> from a string that may represent relative or absolute Uri.
            </summary>
            <param name="uriString">A relative or absolute Uri in string form.</param>
            <returns>The absolute <see cref="T:System.Uri"/> from the parameter string.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.C1TransformToVisual(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Returns a transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement"/> to the specified object.
            </summary>
            <remarks>
            This is an improved version of <see cref="T:System.Windows.UIElement"/>.TransformToVisual. It works in cases that TransformToVisual doesn't, like with UIElements inside <see cref="T:System.Windows.Controls.Primitives.Popup"/>s.
            </remarks>
            <param name="element">The <see cref="T:System.Windows.UIElement"/> that defines the source coordinates.</param>
            <param name="visual">The <see cref="T:System.Windows.UIElement"/> that defines the target coordinates.</param>
            <returns>A transform object that can be used to transform coordinates from the <see cref="T:System.Windows.UIElement"/> to the specified object.</returns>
        </member>
        <member name="M:C1.Phone.Extensions.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between the two points
            </summary>
            <param name="p1">One point.</param>
            <param name="p2">Another point.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.Extensions.ContainsAny``1(System.Collections.Generic.List{``0},``0[])">
            <summary>
            Determines whether the specified list contains any of the following values.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="values">The values.</param>
            <returns>
            	<c>true</c> if the specified list contains any; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:C1.Phone.KeyboardUtil">
            <summary>
            Keyboard utilities.
            </summary>
        </member>
        <member name="P:C1.Phone.KeyboardUtil.Shift">
            <summary>
            Gets a value indicating whether shift key is pressed.
            </summary>
            <value><c>true</c> if shift key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Phone.KeyboardUtil.Ctrl">
            <summary>
            Gets a value indicating whether ctrl key is pressed.
            </summary>
            <value><c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Phone.KeyboardUtil.Alt">
            <summary>
            Gets a value indicating whether alt key is pressed.
            </summary>
            <value><c>true</c> if ctrl key is pressed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:C1.Phone.KeyboardUtil.Command">
            <summary>
            Returns whether ctrl or apple key are pressed.
            </summary>
            <remarks>
            Useful for handling shortcuts in Windows and Mac.
            </remarks>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.C1LoadXaml``1(System.String)">
            <summary>
            [Platform safe] Parses a well-formed XAML fragment and creates a corresponding Silverlight
            object tree, and returns the root of the object tree.
            </summary>
            <typeparam name="T">The type of the object to be parsed.</typeparam>
            <param name="strXaml">String that contains a valid XAML fragment.</param>
            <returns>The root object of the parsed Silverlight object tree.</returns>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.IsInVisualTree(System.Windows.FrameworkElement)">
            <summary>
            [Platform safe] Determines whether the specified element is in visual tree.
            </summary>
            <param name="elem">The framework element.</param>
            <returns>
            	<c>true</c> if the specified element is in visual tree; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.C1BeginInvoke(System.Windows.FrameworkElement,System.Action)">
            <summary>
            [Platform safe] Invokes the begin invoke accessing the Dispatcher of the framework element.
            </summary>
            <param name="elem">The elem.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.C1GetRootVisual(System.Windows.UIElement)">
            <summary>
            [Platform safe] Gets the visual root of the current Application.
            </summary>
            <param name="element">The element.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.C1GetLogicalFocusedElement(System.Windows.FrameworkElement)">
            <summary>
            [Platform safe] Returns a logical focused element from a focus scope where the specified
            <paramref name="relativeToElement"/> is in.
            </summary>
            <param name="relativeToElement"></param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.GetKeyboardFocusedElement">
            <summary>
            [Platform safe] Returns an element with a keyboard focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.C1GetPlatformKeyCode(System.Windows.Input.KeyEventArgs)">
            <summary>
            [Platform safe] Gets platform key code from a KeyEventArgs.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.AdjustContentControlTemplate(System.Windows.Controls.ControlTemplate)">
            <summary>
            [Platform safe] Adjusts, if possible, a ControlTemplate intended for the 
            ContentControl.Template property to make it functional in WPF, and returns a passed template
            reference. Do nothing in Silverlight, just returns a passed template.
            </summary>
            <param name="template"></param>
            <returns></returns>
            <remarks>
            This method resolves the following WPF specific problem: if a ControlTemplate assigned to the
            ContentControl.Template property has a not assigned TargetType property then a ContentPresenter
            element used in the template becomes non-functional. As a result an assignment of some UI to
            the ContentControl.Content property has no effect.
            <para>
            This method checks the ControlTemplate.TargetType property and assign it with ContentControl
            type if the property is not assigned yet.
            </para>
            <para>
            Note that this method works only if the template is not sealed yet, which usually means that it
            has not been applied somewhere at the moment. If the template is sealed then this method does 
            nothing.
            </para>
            </remarks>
        </member>
        <member name="M:C1.Phone.PlatformIndependent.IsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            [Platform safe] Gets an indication whether the specified object lives in a design-time environment.
            </summary>
            <param name="obj">
            Object to check.
            </param>
            <returns>
            True if object is in design-time mode; otherwise, false.
            </returns>
        </member>
        <member name="T:C1.Phone.SourcedEventArgs">
            <summary>
            Contains data for events with a source different from the object firing the event.
            </summary>
        </member>
        <member name="P:C1.Phone.SourcedEventArgs.Source">
            <summary>
            Gets or sets the source of the event.
            </summary>
        </member>
        <member name="M:C1.Phone.VisualStateHelper.GoToState(System.Windows.Controls.Control,System.String,System.Boolean)">
            <summary>
            Tries to go to a new state and throws a friendly error message
            </summary>
            <param name="control">Control that is going to change the state.</param>
            <param name="stateName">Name of the state.</param>
            <param name="useTransitions">Use transitions or not.</param>
        </member>
        <member name="T:C1.Phone.VTreeHelper">
            <summary>
            The <see cref="T:C1.Phone.VTreeHelper"/> class provides utility methods that perform common tasks involving nodes in a visual tree.
            </summary>
        </member>
        <member name="M:C1.Phone.VTreeHelper.GetChildOfType(System.Windows.DependencyObject,System.Type)">
            <summary>
            Returns the first child visual object of the specified type within a specified parent.
            </summary>
            <param name="reference">The parent visual, referenced as a <see cref="T:System.Windows.DependencyObject"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> of the children element to search for.</param>
            <returns>The visual object of the specified type.</returns>
        </member>
        <member name="M:C1.Phone.VTreeHelper.GetChildrenOfType(System.Windows.DependencyObject,System.Type,System.Collections.Generic.IList{System.Windows.DependencyObject}@)">
            <summary>
            Returns all children visual objects of the specified type within a specified parent.
            </summary>
            <param name="reference">The parent visual, referenced as a <see cref="T:System.Windows.DependencyObject"/>.</param>
            <param name="type">The <see cref="T:System.Type"/> of the children element to search for.</param>
            <param name="list">The <see cref="T:System.Collections.Generic.IList`1"/> object to fill with found objects.</param>
        </member>
        <member name="M:C1.Phone.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.Phone.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.Phone.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is null.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.Phone.VTreeHelper.GetParentOfType(System.Windows.DependencyObject,System.Type,System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the parent 
            of the visual object of the specified type. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="type">The <see cref="T:System.Type"/> of the parent element to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <param name="lookOutsideVisualTree">Specifies whether the search should go on outside the VisualTree.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="M:C1.Phone.VTreeHelper.GetFirstParent(System.Windows.DependencyObject,System.Collections.Generic.IList{System.Type},System.Windows.DependencyObject)">
            <summary>
            Returns a <see cref="T:System.Windows.DependencyObject"/> value that represents the first parent 
            of the visual object which type is one of the specified tyles. Method looks up the visual tree until
            the desired parent element is found or parent element is equal to the specified endObject.
            </summary>
            <param name="reference">The visual whose parent is returned.</param>
            <param name="types">The <see cref="T:System.Collections.Generic.IList`1"/> list of types to search for.</param>
            <param name="endObject">The visual representing the end point of search.</param>
            <returns>The parent of the visual.</returns>
        </member>
        <member name="T:C1.Phone.C1DockPanel">
            <summary>
            Defines an area where you can arrange child elements either horizontally or vertically, relative to each other.
            </summary>	
        </member>
        <member name="F:C1.Phone.C1DockPanel.LastChildFillProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1DockPanel.LastChildFill"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1DockPanel.GetDock(System.Windows.DependencyObject)">
            <summary> 
            Gets the value of the Dock attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element from which to read the attached property.
            </param> 
            <returns>The value of the Dock property.</returns>
        </member>
        <member name="M:C1.Phone.C1DockPanel.SetDock(System.Windows.DependencyObject,C1.Phone.Dock)">
            <summary> 
            Sets the value of the Dock attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element to write the attached property to.
            </param> 
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:C1.Phone.C1DockPanel.DockProperty">
            <summary> 
            Identifies the Dock attached property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1DockPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1DockPanel"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1DockPanel.LastChildFill">
            <summary>
            Gets or sets a value indicating whether the last child of the panel fills the remaining space.
            </summary>
            <remarks>
            If this property is set to True, then the Dock property of the last child element will be ignored, and the panel will try to fill the empty space.
            </remarks>
        </member>
        <member name="T:C1.Phone.C1LayoutTransformer">
            <summary>
            Represents a control that applies a layout transformation to its Content.
            </summary>	
        </member>
        <member name="F:C1.Phone.C1LayoutTransformer.AcceptableDelta">
            <summary>
            Acceptable difference between two doubles.
            </summary>
        </member>
        <member name="F:C1.Phone.C1LayoutTransformer.DecimalsAfterRound">
            <summary>
            Number of decimals to round the Matrix to.
            </summary>
        </member>
        <member name="F:C1.Phone.C1LayoutTransformer.LayoutTransformProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1LayoutTransformer.LayoutTransform"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1LayoutTransformer"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1LayoutTransformer"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="F:C1.Phone.C1LayoutTransformer._matrixTransform">
            <summary>
            RenderTransform/MatrixTransform applied to _transformRoot.
            </summary>
        </member>
        <member name="F:C1.Phone.C1LayoutTransformer._transformation">
            <summary>
            Transformation matrix corresponding to _matrixTransform.
            </summary>
        </member>
        <member name="F:C1.Phone.C1LayoutTransformer._childActualSize">
            <summary>
            Actual DesiredSize of Child element (the value it returned from its MeasureOverride method).
            </summary>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.ApplyLayoutTransform">
            <summary>
            Applies the layout transform on the LayoutTransformer control content.
            </summary>
            <remarks>
            Only used in advanced scenarios (like animating the LayoutTransform). 
            Should be used to notify the LayoutTransformer control that some aspect 
            of its Transform property has changed. 
            </remarks>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.ProcessTransform(System.Windows.Media.Transform)">
            <summary>
            Processes the Transform to determine the corresponding Matrix.
            </summary>
            <param name="transform">Transform to process.</param>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.GetTransformMatrix(System.Windows.Media.Transform)">
            <summary>
            Walks the Transform(Group) and returns the corresponding Matrix.
            </summary>
            <param name="transform">Transform(Group) to walk.</param>
            <returns>Computed Matrix.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Measure" pass of layout.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements.</param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.ArrangeOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the "Arrange" pass of layout.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>The actual size used.</returns>
            <remarks>
            Using the WPF parameter name finalSize instead of Silverlight's finalSize for clarity
            </remarks>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.ComputeLargestTransformedSize(System.Windows.Size)">
            <summary>
            Compute the largest usable size (greatest area) after applying the transformation to the specified bounds.
            </summary>
            <param name="arrangeBounds">Arrange bounds.</param>
            <returns>Largest Size possible.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.IsSizeSmallerOrClose(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.IsSizeSmaller(System.Windows.Size,System.Windows.Size)">
            <summary>
            Returns true if Size a is smaller than Size b in either dimension.
            </summary>
            <param name="a">Second Size.</param>
            <param name="b">First Size.</param>
            <returns>True if Size a is smaller than Size b in either dimension.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.RoundMatrix(System.Windows.Media.Matrix,System.Int32)">
            <summary>
            Rounds the non-offset elements of a Matrix to avoid issues due to floating point imprecision.
            </summary>
            <param name="matrix">Matrix to round.</param>
            <param name="decimals">Number of decimal places to round to.</param>
            <returns>Rounded Matrix.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.RectTransform(System.Windows.Rect,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Rect.Transform on Silverlight.
            </summary>
            <param name="rect">Rect to transform.</param>
            <param name="matrix">Matrix to transform with.</param>
            <returns>Bounding box of transformed Rect.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.MatrixMultiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.Multiply on Silverlight.
            </summary>
            <param name="matrix1">First matrix.</param>
            <param name="matrix2">Second matrix.</param>
            <returns>Multiplication result.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.MatrixHasInverse(System.Windows.Media.Matrix)">
            <summary>
            Implements WPF's Matrix.HasInverse on Silverlight.
            </summary>
            <param name="matrix">Matrix to check for inverse.</param>
            <returns>True if the Matrix has an inverse.</returns>
        </member>
        <member name="M:C1.Phone.C1LayoutTransformer.DiagnosticWriteLine(System.String)">
            <summary>
            Outputs diagnostic info if DIAGNOSTICWRITELINE is defined.
            </summary>
            <param name="message">Diagnostic message.</param>
        </member>
        <member name="P:C1.Phone.C1LayoutTransformer.LayoutTransform">
            <summary>
            Gets or sets the layout transform to apply on the LayoutTransformer control content.
            </summary>
            <remarks>
            Corresponds to UIElement.LayoutTransform.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1LayoutTransformer.Child">
            <summary>
            Gets the child element being transformed.
            </summary>
        </member>
        <member name="T:C1.Phone.C1UniformGrid">
            <summary>
            Provides a way to arrange content in a grid where all the cells in the grid have the same size.
            </summary>	
        </member>
        <member name="F:C1.Phone.C1UniformGrid.ColumnsProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1UniformGrid.Columns"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1UniformGrid.RowsProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1UniformGrid.Rows"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1UniformGrid.FirstColumnProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1UniformGrid.FirstColumn"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1UniformGrid.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1UniformGrid"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1UniformGrid.Columns">
            <summary>
            Gets or sets the number of columns for this panel.
            </summary>
            <remarks>
            The default value (0) specifies that the column count is computed based on the number of rows and the number of visible child elements.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1UniformGrid.Rows">
            <summary>
            Gets or sets the number of rows for this panel.
            </summary>
            <remarks>
            The default value (0) specifies that the row count is computed based on the number of columns and the number of visible child elements.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1UniformGrid.FirstColumn">
            <summary>
            Gets or sets the number of leading blank cells in the first row of the grid.
            </summary>
            <remarks>
            The default value is 0. The value of the FirstColumn must be less than the value of the Columns property to work correctly.
            </remarks>
        </member>
        <member name="T:C1.Phone.C1UniformGrid.IntTuple">
            <summary>
            A structure that groups two integer values.
            </summary>
        </member>
        <member name="T:C1.Phone.C1ValidationDecorator">
            <summary>
            Displays binding validation errors.
            </summary>	
        </member>
        <member name="M:C1.Phone.C1ValidationDecorator.ChangeVisualStateValidationStates(System.Boolean)">
            <summary>
            Updates the current visual state of the ValidationStates visual state group to match the object's properties.
            </summary>
        </member>
        <member name="F:C1.Phone.C1ValidationDecorator.ValidationStateProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ValidationDecorator.ValidationState"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ValidationDecorator.TargetProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ValidationDecorator.Target"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1ValidationDecorator.CornerRadiusProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1ValidationDecorator.CornerRadius"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1ValidationDecorator.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1ValidationDecorator"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.C1ValidationDecorator.OnApplyTemplate">
            <summary>
            Builds the visual tree for the <see cref="T:C1.Phone.C1ValidationDecorator"/> control when a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:ApplyTemplate"/> method.
            </remarks>
        </member>
        <member name="P:C1.Phone.C1ValidationDecorator.ValidationState">
            <summary>
            Gets or sets the <see cref="P:C1.Phone.C1ValidationDecorator.ValidationState"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ValidationDecorator.Target">
            <summary>
            Gets or sets the target of the validation.
            </summary>
        </member>
        <member name="P:C1.Phone.C1ValidationDecorator.CornerRadius">
            <summary>
            Gets or sets a value that represents the degree to which the corners of the element are rounded.
            </summary>
        </member>
        <member name="T:C1.Phone.C1WrapPanel">
            <summary>
            Positions child elements sequentially from top to bottom or from right to left, depending on the value of the <see cref="P:C1.Phone.C1WrapPanel.Orientation"/> property.
            </summary>	
        </member>
        <member name="F:C1.Phone.C1WrapPanel.OrientationProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1WrapPanel.Orientation"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1WrapPanel.ItemWidth"/> dependency property. 
            </summary>
        </member>
        <member name="F:C1.Phone.C1WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the <see cref="P:C1.Phone.C1WrapPanel.ItemHeight"/> dependency property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1WrapPanel.GetBreakLine(System.Windows.DependencyObject)">
            <summary> 
            Gets the value of the BreakLine attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element from which to read the attached property.
            </param> 
            <returns>The value of the BreakLine property.</returns>
        </member>
        <member name="M:C1.Phone.C1WrapPanel.SetBreakLine(System.Windows.DependencyObject,C1.Phone.BreakLine)">
            <summary> 
            Sets the value of the BreakLine attached property for the 
            specified element.
            </summary> 
            <param name="element">
            The element to write the attached property to.
            </param> 
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:C1.Phone.C1WrapPanel.BreakLineProperty">
            <summary> 
            Identifies the BreakLine attached property. 
            </summary>
        </member>
        <member name="M:C1.Phone.C1WrapPanel.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:C1.Phone.C1WrapPanel"/>.
            </summary>
        </member>
        <member name="P:C1.Phone.C1WrapPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are stacked.
            </summary>
        </member>
        <member name="P:C1.Phone.C1WrapPanel.ItemWidth">
            <summary>
            Gets or sets a value that specifies the width of all items that are contained within the panel.
            </summary>
        </member>
        <member name="P:C1.Phone.C1WrapPanel.ItemHeight">
            <summary>
            Gets or sets a value that specifies the height of all items that are contained within the panel.
            </summary>
        </member>
        <member name="T:C1.Phone.C1BrushBuilder">
            <summary>
            Builds a Brush from an Input color a Design brush and a color base extrapolating the design brush.
            </summary>
        </member>
        <member name="M:C1.Phone.C1BrushBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1BrushBuilder"/> class.
            </summary>
        </member>
        <member name="F:C1.Phone.C1BrushBuilder.DesignBrushProperty">
            <summary>
            Original Brush created by a designer, which is typically a degree of colors based in the design color.
            </summary>
        </member>
        <member name="F:C1.Phone.C1BrushBuilder.DesignColorProperty">
            <summary>
            Gets or sets the base color for which the design has been created.
            </summary>
        </member>
        <member name="F:C1.Phone.C1BrushBuilder.InputProperty">
            <summary>
            Gets or sets the input which is the color to what the design brush will be extrapolated.
            </summary>
        </member>
        <member name="P:C1.Phone.C1BrushBuilder.DesignBrush">
            <summary>
            Gets or sets the design brush.
            Original Brush created by a designer, which is typically a degree of colors based in the design color.
            </summary>
            <value>The design brush.</value>
        </member>
        <member name="P:C1.Phone.C1BrushBuilder.DesignColor">
            <summary>
            Gets or sets the base color for which the design has been created.
            </summary>
            <value>The color of the design.</value>
        </member>
        <member name="P:C1.Phone.C1BrushBuilder.Input">
            <summary>
            Gets or sets the input which is the color to what the design brush will be extrapolated.
            </summary>
            <value>The input.</value>
        </member>
        <member name="P:C1.Phone.C1BrushBuilder.ExtrapolationMethod">
            <summary>
            Gets or sets the extrapolation method.
            </summary>
            <value>The extrapolation method.</value>
        </member>
        <member name="P:C1.Phone.C1BrushBuilder.Output">
            <summary>
            Gets the resulting brush of the extrapolation the design brush to the input color.
            </summary>
            <value>The output.</value>
        </member>
        <member name="E:C1.Phone.C1BrushBuilder.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="T:C1.Phone.BrushBuilderExtrapolationMethod">
            <summary>
            Determines how the extrapolation of colors will be made.
            </summary>
        </member>
        <member name="F:C1.Phone.BrushBuilderExtrapolationMethod.Absolute">
            <summary>
            The extrapolation will be done adding and subtracting the absolute difference of saturation and luminance. 
            </summary>
        </member>
        <member name="T:C1.Phone.ClearStyleExtensions">
            <summary>
            Attached properties used to pass brushes to Microsoft controls.
            </summary>
        </member>
        <member name="F:C1.Phone.ClearStyleExtensions.MouseOverBrushProperty">
            <summary>
            This attached property can modify the mouse over visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.GetMouseOverBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the mouse over brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.SetMouseOverBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the mouse over brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the mouse over state.</param>
        </member>
        <member name="F:C1.Phone.ClearStyleExtensions.PressedBrushProperty">
            <summary>
            This attached property can modify the pressed visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.GetPressedBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the pressed brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.SetPressedBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the pressed brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the pressed state.</param>
        </member>
        <member name="F:C1.Phone.ClearStyleExtensions.FocusBrushProperty">
            <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.GetFocusBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the focus brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.SetFocusBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the focus brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the focus state.</param>
        </member>
        <member name="F:C1.Phone.ClearStyleExtensions.ButtonBackgroundProperty">
            <summary>
            This attached property can modify background of clear style button.
            </summary>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.GetButtonBackground(System.Windows.FrameworkElement)">
            <summary>
            Gets the clear style button background brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.SetButtonBackground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the clear style button background brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the background of clear style button.</param>
        </member>
        <member name="F:C1.Phone.ClearStyleExtensions.ButtonForegroundProperty">
            <summary>
            This attached property can modify background of clear style button.
            </summary>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.GetButtonForeground(System.Windows.FrameworkElement)">
            <summary>
            Gets the clear style button foreground brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.SetButtonForeground(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the clear style button foreground brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the foreground of clear style button.</param>
        </member>
        <member name="F:C1.Phone.ClearStyleExtensions.CaretBrushProperty">
            <summary>
            This attached property can modify the caret visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.GetCaretBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the caret brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.SetCaretBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the caret brush.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The brush used in the caret state.</param>
        </member>
        <member name="F:C1.Phone.ClearStyleExtensions.CornerRadiusProperty">
            <summary>
            This attached property can modify the focus visual style of a clear style control.
            </summary>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.GetCornerRadius(System.Windows.FrameworkElement)">
            <summary>
            Gets the CornerRadius.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.SetCornerRadius(System.Windows.FrameworkElement,System.Windows.CornerRadius)">
            <summary>
            Sets the CornerRadius.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The CornerRadius used in borders.</param>
        </member>
        <member name="F:C1.Phone.ClearStyleExtensions.ScrollBarStyleProperty">
            <summary>
            This attached property can modify the style of a scrollbar.
            </summary>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.GetScrollBarStyle(System.Windows.FrameworkElement)">
            <summary>
            Gets the style of a scrollbar.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.ClearStyleExtensions.SetScrollBarStyle(System.Windows.FrameworkElement,System.Windows.Style)">
            <summary>
            Sets the style of a scrollbar.
            </summary>
            <param name="element">The element which contains the attached property.</param>
            <param name="value">The style used in scrollbars.</param>
        </member>
        <member name="T:C1.Phone.ColorConverter">
            <summary>
            Converts between Colors and Brushes.
            </summary>
        </member>
        <member name="T:C1.Phone.C1Command">
            <summary>
            Defines a command that implements ICommand and is routed through the element tree.
            Limitation:
            when converting from string, doesn't honor xaml namespaces.
            If you have several classes with the same name in different namespaces, don't set command in xaml as string,
            use binding syntax instead.
            </summary>
        </member>
        <member name="M:C1.Phone.C1Command.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1Command"/> class.
            </summary>
        </member>
        <member name="M:C1.Phone.C1Command.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:C1.Phone.C1Command"/> class with the specified name and owner type.
            </summary>
            <param name="name">Declared name for serialization.</param>
            <param name="ownerType">The type which is registering the command.</param>
        </member>
        <member name="M:C1.Phone.C1Command.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current command.
            </summary>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.C1Command.CanExecute(System.Object,System.Windows.UIElement)">
            <summary>
            Determines whether this <see cref="T:C1.Phone.C1Command"/> can execute in its current state.
            </summary>
            <param name="parameter">A user defined data type.</param>
            <param name="target">The command target.</param>
            <returns>True if the command can execute on the current command target; otherwise, False.</returns>
        </member>
        <member name="M:C1.Phone.C1Command.Execute(System.Object,System.Windows.UIElement)">
            <summary>
            Executes the <see cref="T:C1.Phone.C1Command"/> on the current command target.
            </summary>
            <param name="parameter">User defined parameter to be passed to the handler.</param>
            <param name="target">Element at which to being looking for command handlers.</param>
        </member>
        <member name="E:C1.Phone.C1Command.CanExecuteChanged">
            <summary>
            Occurs when changes to the command source are detected by the command manager. 
            These changes often affect whether the command should execute on the current command target.
            </summary>
        </member>
        <member name="P:C1.Phone.C1Command.Name">
            <summary>
            Gets the name of the command. 
            </summary>
        </member>
        <member name="P:C1.Phone.C1Command.OwnerType">
            <summary>
            Gets the type that is registered with the command.
            </summary>
        </member>
        <member name="T:C1.Phone.CommandConverter">
            <summary>
            Converts an <see cref="T:System.Windows.Input.ICommand"/> object to and from other types.
            </summary>
        </member>
        <member name="M:C1.Phone.CommandConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether an object of the specified type can be converted to an instance of ICommand.
            </summary>
            <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
            <param name="sourceType">The type being evaluated for conversion.</param>
            <returns>True if this converter can perform the operation; otherwise, False.</returns>
        </member>
        <member name="M:C1.Phone.CommandConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether an instance of ICommand can be converted to the specified type.
            </summary>
            <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
            <param name="destinationType">The type being evaluated for conversion.</param>
            <returns>True if this converter can perform the operation; otherwise, False.</returns>
        </member>
        <member name="M:C1.Phone.CommandConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Attempts to convert the specified object to an ICommand.
            </summary>
            <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
            <param name="culture">Culture specific information.</param>
            <param name="source">The object to convert.</param>
            <returns>The converted object, or null reference if source is an empty string.</returns>
        </member>
        <member name="M:C1.Phone.CommandConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Attempts to convert an ICommand to the specified type.
            </summary>
            <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
            <param name="culture">Culture specific information.</param>
            <param name="value">The object to convert.</param>
            <param name="destinationType">The type to convert the object to.</param>
            <returns>The converted object, or an empty string if value is null.</returns>
        </member>
        <member name="T:C1.Phone.CommandBinding">
            <summary>
            Binds an <see cref="T:System.Windows.Input.ICommand"/> to the event handlers that implement the command. 
            </summary>
        </member>
        <member name="M:C1.Phone.CommandBinding.#ctor">
            <summary>
            Initializes a new instance of the CommandBinding class.
            </summary>
        </member>
        <member name="M:C1.Phone.CommandBinding.#ctor(System.Windows.Input.ICommand)">
            <summary>
            Initializes a new instance of the CommandBinding class by using the specified <see cref="T:System.Windows.Input.ICommand"/>.
            </summary>
            <param name="command">The command.</param>
        </member>
        <member name="M:C1.Phone.CommandBinding.#ctor(System.Windows.Input.ICommand,C1.Phone.ExecutedRoutedEventHandler)">
            <summary>
            Initializes a new instance of the CommandBinding class by using the specified 
            <see cref="T:System.Windows.Input.ICommand"/> and the specified <see cref="E:C1.Phone.CommandBinding.Executed"/> event handler.
            </summary>
            <param name="command">The command.</param>
            <param name="executed">The handler for the <see cref="E:C1.Phone.CommandBinding.Executed"/> event on the new command.</param>
        </member>
        <member name="M:C1.Phone.CommandBinding.#ctor(System.Windows.Input.ICommand,C1.Phone.ExecutedRoutedEventHandler,C1.Phone.CanExecuteRoutedEventHandler)">
            <summary>
            Initializes a new instance of the CommandBinding class by using the specified 
            <see cref="T:System.Windows.Input.ICommand"/> and the specified <see cref="E:C1.Phone.CommandBinding.Executed"/> and 
            <see cref="E:C1.Phone.CommandBinding.CanExecute"/> even handlers.
            </summary>
            <param name="command">The command.</param>
            <param name="executed">The handler for the <see cref="E:C1.Phone.CommandBinding.Executed"/> event on the new command.</param>
            <param name="canExecute">The handler for the <see cref="E:C1.Phone.CommandBinding.CanExecute"/> event on the new command.</param>
        </member>
        <member name="E:C1.Phone.CommandBinding.CanExecute">
            <summary>
            Occurs when the command associated with this <see cref="T:C1.Phone.CommandBinding"/> initiates a 
            check to determine whether the command can be executed on the command target.
            </summary>
        </member>
        <member name="E:C1.Phone.CommandBinding.Executed">
            <summary>
            Occurs when the command associated with this <see cref="T:C1.Phone.CommandBinding"/> executes.
            </summary>
        </member>
        <member name="E:C1.Phone.CommandBinding.PreviewCanExecute">
            <summary>
            Occurs when the command associated with this <see cref="T:C1.Phone.CommandBinding"/> initiates 
            a check to determine whether the command can be executed on the current command target.
            </summary>
        </member>
        <member name="E:C1.Phone.CommandBinding.PreviewExecuted">
            <summary>
            Occurs when the command associated with this <see cref="T:C1.Phone.CommandBinding"/> executes.
            </summary>
        </member>
        <member name="P:C1.Phone.CommandBinding.Command">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Input.ICommand"/> associated with this <see cref="T:C1.Phone.CommandBinding"/>. 
            </summary>
        </member>
        <member name="T:C1.Phone.CommandExtensions">
            <summary>
            Provides attached properties emulating ICommandSource interface.
            </summary>
        </member>
        <member name="F:C1.Phone.CommandExtensions.CommandProperty">
            <summary>
            Identifies the Command attached property.
            </summary>
        </member>
        <member name="M:C1.Phone.CommandExtensions.GetCommand(System.Windows.FrameworkElement)">
            <summary>
            Gets the command that will be executed when the command source is invoked.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The <see cref="T:System.Windows.Input.ICommand"/> property value for the element.</returns>
        </member>
        <member name="M:C1.Phone.CommandExtensions.SetCommand(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Sets the command that will be executed when the command source is invoked.
            </summary>
            <param name="element">The element to which the attached property is written.</param>
            <param name="value">The needed <see cref="T:System.Windows.Input.ICommand"/> value.</param>
        </member>
        <member name="F:C1.Phone.CommandExtensions.CommandParameterProperty">
            <summary>
            Identifies the CommandParameter attached property.
            </summary>
        </member>
        <member name="M:C1.Phone.CommandExtensions.GetCommandParameter(System.Windows.FrameworkElement)">
            <summary>
            Gets a user defined data value that can be passed to the command when it is executed.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The command specific data.</returns>
        </member>
        <member name="M:C1.Phone.CommandExtensions.SetCommandParameter(System.Windows.FrameworkElement,System.Object)">
            <summary>
            Sets a user defined data value that can be passed to the command when it is executed.
            </summary>
            <param name="element">The element to which the attached property is written.</param>
            <param name="value">The command specific data.</param>
        </member>
        <member name="F:C1.Phone.CommandExtensions.CommandTargetProperty">
            <summary>
            Identifies the CommandTarget attached property.
            </summary>
        </member>
        <member name="M:C1.Phone.CommandExtensions.GetCommandTarget(System.Windows.FrameworkElement)">
            <summary>
            Gets the object that the command is being executed on.
            </summary>
            <param name="element">The element from which the property value is read.</param>
            <returns>The object that the command is being executed on.</returns>
        </member>
        <member name="M:C1.Phone.CommandExtensions.SetCommandTarget(System.Windows.FrameworkElement,System.Windows.UIElement)">
            <summary>
            Sets the object that the command is being executed on.
            </summary>
            <param name="element">The element to which the attached property is written.</param>
            <param name="value">The object that the command is being executed on.</param>
        </member>
        <member name="T:C1.Phone.CommandToElementsMap">
            <summary>
            Maintains a mapping between ICommand and FrameworkElement
            objects, for the CommandExtensions class.
            </summary>
        </member>
        <member name="F:C1.Phone.CommandToElementsMap._map">
            <summary>
            Maps ICommand objects to lists of FrameworkElement objects.  Stores the object references
            as WeakReferences, so that the commands and buttons can be garbage collected as necessary.
            </summary>
        </member>
        <member name="T:C1.Phone.CommandManager">
            <summary>
            Provides command related utility methods that register CommandBinding objects for class 
            owners and commands, add and remove command event handlers, and provides services 
            for querying the status of a command.
            </summary>
        </member>
        <member name="M:C1.Phone.CommandManager.InvalidateRequerySuggested">
            <summary>
            Call this method for explicit check the ability of registered commands to execute.
            </summary>
        </member>
        <member name="M:C1.Phone.CommandManager.RegisterClassCommandBinding(System.Type,C1.Phone.CommandBinding)">
            <summary>
            Registers a <see cref="T:C1.Phone.CommandBinding"/> with the specified type. 
            </summary>
            <param name="type">The class with which to register commandBinding.</param>
            <param name="commandBinding">The command binding to register.</param>
        </member>
        <member name="E:C1.Phone.CommandManager.RequerySuggested">
            <summary>
            Occurs when the <see cref="T:C1.Phone.CommandManager"/> detects conditions that might change 
            the ability of a command to execute.
            </summary>
            <remarks>Contrary to WPF System.Windows.Input.CommandManger implementation, 
            <see cref="T:C1.Phone.CommandManager"/> doesn't track layout changes. 
            So, this event might not be called at some conditions. 
            If you came across this issue, use <see cref="M:C1.Phone.CommandManager.InvalidateRequerySuggested"/> 
            method for explicit check.</remarks>
        </member>
        <member name="T:C1.Phone.C1RoutedEventArgs">
            <summary>
            The base class for <see cref="T:C1.Phone.CanExecuteRoutedEventArgs"/> and <see cref="T:C1.Phone.ExecutedRoutedEventArgs"/>
            classes.
            Provides some additional properties comparing to the <see cref="T:System.Windows.RoutedEventArgs"/> class.
            </summary>
        </member>
        <member name="P:C1.Phone.C1RoutedEventArgs.EventName">
            <summary>
            Gets the input event name associated with this <see cref="T:C1.Phone.CanExecuteRoutedEventArgs"/> instance.
            </summary>
        </member>
        <member name="P:C1.Phone.C1RoutedEventArgs.Handled">
            <summary>
            Gets or sets a value that indicates the present state of the event handling 
            for event as it travels the route.
            </summary>
        </member>
        <member name="P:C1.Phone.C1RoutedEventArgs.OriginalSource">
            <summary>
            Gets the original reporting source as determined by pure hit testing. 
            </summary>
        </member>
        <member name="T:C1.Phone.CanExecuteRoutedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Phone.CommandBinding.CanExecute"/> event.
            </summary>
            <param name="sender">The command target that is invoking the handler.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:C1.Phone.CanExecuteRoutedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Phone.CommandBinding.CanExecute"/> and 
            <see cref="E:C1.Phone.CommandBinding.PreviewCanExecute"/> routed events.
            </summary>
        </member>
        <member name="P:C1.Phone.CanExecuteRoutedEventArgs.CanExecute">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:System.Windows.Input.ICommand"/> associated with 
            this event can be executed on the command target.
            </summary>
        </member>
        <member name="P:C1.Phone.CanExecuteRoutedEventArgs.Command">
            <summary>
            Gets the command associated with this event.
            </summary>
        </member>
        <member name="P:C1.Phone.CanExecuteRoutedEventArgs.ContinueRouting">
            <summary>
            Determines whether the input event that invoked the command 
            should continue to route through the element tree.
            </summary>
        </member>
        <member name="P:C1.Phone.CanExecuteRoutedEventArgs.Parameter">
            <summary>
            Gets the command specific data.
            </summary>
        </member>
        <member name="T:C1.Phone.ExecutedRoutedEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:C1.Phone.CommandBinding.Executed"/> and 
            <see cref="E:C1.Phone.CommandBinding.PreviewExecuted"/> events.
            </summary>
            <param name="sender">The object where the event handler is attached.</param>
            <param name="e">The event data.</param>
        </member>
        <member name="T:C1.Phone.ExecutedRoutedEventArgs">
            <summary>
            Provides data for the <see cref="E:C1.Phone.CommandBinding.Executed"/> and 
            <see cref="E:C1.Phone.CommandBinding.PreviewExecuted"/> routed events.
            </summary>
        </member>
        <member name="P:C1.Phone.ExecutedRoutedEventArgs.Command">
            <summary>
            Gets the command associated with this event.
            </summary>
        </member>
        <member name="P:C1.Phone.ExecutedRoutedEventArgs.Parameter">
            <summary>
            Gets the command specific data.
            </summary>
        </member>
        <member name="T:C1.Phone.ValidationState">
            <summary>
            Enumerates binding validation states.
            </summary>
        </member>
        <member name="F:C1.Phone.ValidationState.Valid">
            <summary>
            All bindings are valid.
            </summary>
        </member>
        <member name="F:C1.Phone.ValidationState.InvalidFocused">
            <summary>
            A binding is invalid and the control is focused.
            </summary>
        </member>
        <member name="F:C1.Phone.ValidationState.InvalidUnfocused">
            <summary>
            A binding is invalid and the control is unfocused.
            </summary>
        </member>
        <member name="T:C1.Phone.TextEditedEventArgs">
            <summary>
            AutoComplete event details.
            </summary>
        </member>
        <member name="P:C1.Phone.TextEditedEventArgs.LastKey">
            <summary>
            Gets or sets the last key.
            </summary>
            <value>The last key.</value>
        </member>
        <member name="P:C1.Phone.TextEditedEventArgs.CurrentText">
            <summary>
            Current text.
            </summary>
        </member>
        <member name="P:C1.Phone.TextEditedEventArgs.CurrentSelectionStart">
            <summary>
            Current selection start.
            </summary>
        </member>
        <member name="P:C1.Phone.TextEditedEventArgs.NewText">
            <summary>
            Text that will be put in the control after the AutoComplete.
            </summary>
        </member>
        <member name="P:C1.Phone.TextEditedEventArgs.NewSelectionStart">
            <summary>
            Index where the selection will start after the AutoComplete.
            </summary>
        </member>
        <member name="P:C1.Phone.TextEditedEventArgs.Cancel">
            <summary>
            Cancel the input of the new text.
            </summary>
        </member>
        <member name="T:C1.Phone.BreakLine">
            <summary>
            Specifies hard line breaks before and/or after elements in a <see cref="T:C1.Silverlight.C1WrapPanel" />.
            </summary>
        </member>
        <member name="F:C1.Phone.BreakLine.None">
            <summary>
            No hard breaks. The next element will be positioned in the same line if there is enough room.
            </summary>
        </member>
        <member name="F:C1.Phone.BreakLine.After">
            <summary>
            Add a hard break after this element. The next element will be positioned in the next line.
            </summary>
        </member>
        <member name="F:C1.Phone.BreakLine.Before">
            <summary>
            Add a hard break before this element.
            </summary>
        </member>
        <member name="F:C1.Phone.BreakLine.AfterAndBefore">
            <summary>
            Add hard breaks before and after this element. It will be positioned by itself on a line.
            </summary>
        </member>
        <member name="T:C1.Phone.C1LayoutRounder">
            <summary>
            Wrapper to get layout rounding in WPF 3.5.
            </summary>
        </member>
        <member name="M:C1.Phone.C1LayoutRounder.MeasureOverride(System.Windows.Size)">
            <summary>
            Provides the behavior for the Measure pass of layout.
            </summary>
        </member>
        <member name="T:C1.Phone.Dock">
            <summary>
            Specifies how controls are sized and aligned within <see cref="T:C1.Silverlight.C1DockPanel" /> controls.
            </summary>
        </member>
        <member name="F:C1.Phone.Dock.Left">
            <summary>
            The control's left edge is docked to the left edge of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Phone.Dock.Right">
            <summary>
            The control's right edge is docked to the right edge of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Phone.Dock.Top">
            <summary>
            The control's top edge is docked to the top of its containing control. 
            </summary>
        </member>
        <member name="F:C1.Phone.Dock.Bottom">
            <summary>
            The control's bottom edge is docked to the bottom of its containing control. 
            </summary>
        </member>
        <member name="T:C1.Phone.DockExtensions">
            <summary>
            Provides exntesions methods for <see cref="T:C1.Phone.Dock"/>.
            </summary>
        </member>
        <member name="M:C1.Phone.DockExtensions.GetOrientation(C1.Phone.Dock)">
            <summary>
            Gets the orientation.
            </summary>
            <param name="dock">The dock.</param>
            <returns></returns>
        </member>
        <member name="M:C1.Phone.DockExtensions.GetOpposite(C1.Phone.Dock)">
            <summary>
            Gets the opposite.
            </summary>
            <param name="dock">The dock.</param>
            <returns></returns>
        </member>
    </members>
</doc>
